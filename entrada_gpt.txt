

--- HISTORIA DE USUARIO ---
- id: HDU006
  title: Registrar y mantener colaboradores
  descripcion: Como administrador, quiero registrar los colaboradores activos en la
    organización para luego evaluar sus skills.
  entidad: Colaborador
  campos:
  - id
  - nombre
  - paterno
  - materno
  - id_calibrador_actual
  validaciones:
  - id único
  - relación opcional a otro colaborador como calibrador

--- CLASES DISPONIBLES EN EL PROYECTO ---
Contenido
Skill
Especialidad
Rol
SkillMap
Categoria
SkillController
CategoriaController
ContenidoController
RolController
SkillMapController
SkillMapRepository
ContenidoRepository
SkillRepository
RolRepository
CategoriaRepository
ContenidoService
SkillService
SkillMapService
RolService
CategoriaService
BackendApplication


--- CÓDIGO EXISTENTE DEL PROYECTO ---


// Archivo: src/main/java/com/skillmap/backend/model/Contenido.java

package com.skillmap.backend.model;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Column;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
@Entity
public class Contenido {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @NotNull
    @Min(1)
    @Max(5)
    private Integer nivel;
    @NotNull
    @Column(length = 500)
    private String url_curso;
    @NotNull
    @Column(length = 500)
    private String url_test;
    @NotNull
    private Long skill_id;
    // getters and setters
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public Integer getNivel() {
        return nivel;
    }
    public void setNivel(Integer nivel) {
        this.nivel = nivel;
    }
    public String getUrl_curso() {
        return url_curso;
    }
    public void setUrl_curso(String url_curso) {
        this.url_curso = url_curso;
    }
    public String getUrl_test() {
        return url_test;
    }
    public void setUrl_test(String url_test) {
        this.url_test = url_test;
    }
    public Long getSkill_id() {
        return skill_id;
    }
    public void setSkill_id(Long skill_id) {
        this.skill_id = skill_id;
    }
}


// Archivo: src/main/java/com/skillmap/backend/model/Skill.java

package com.skillmap.backend.model;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import jakarta.validation.constraints.NotNull;
@Entity
public class Skill {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
    @NotNull
    private String nombre;
    @ManyToOne
    @NotNull
    private Categoria categoria;
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getNombre() {
        return nombre;
    }
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
    public Categoria getCategoria() {
        return categoria;
    }
    public void setCategoria(Categoria categoria) {
        this.categoria = categoria;
    }
}


// Archivo: src/main/java/com/skillmap/backend/model/Especialidad.java

package com.skillmap.backend.model;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.validation.constraints.NotBlank;
@Entity
public class Especialidad {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @NotBlank
    private String nombre;
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getNombre() {
        return nombre;
    }
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
}


// Archivo: src/main/java/com/skillmap/backend/model/Rol.java

package com.skillmap.backend.model;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Column;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
@Entity
public class Rol {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @NotBlank
    @Column(unique = true)
    private String nombre;
    @NotBlank
    private String descripcion;
    @NotNull
    @ManyToOne
    @JoinColumn(name = "especialidad_id", nullable = false)
    private Especialidad especialidad;
    @NotNull
    @Enumerated(EnumType.STRING)
    private Grado grado;
    public enum Grado {
        TRAINEE, JUNIOR, PLENO, SEMI_SENIOR, SENIOR, EXPERTO
    }
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getNombre() {
        return nombre;
    }
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
    public String getDescripcion() {
        return descripcion;
    }
    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }
    public Especialidad getEspecialidad() {
        return especialidad;
    }
    public void setEspecialidad(Especialidad especialidad) {
        this.especialidad = especialidad;
    }
    public Grado getGrado() {
        return grado;
    }
    public void setGrado(Grado grado) {
        this.grado = grado;
    }
}


// Archivo: src/main/java/com/skillmap/backend/model/SkillMap.java

package com.skillmap.backend.model;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Column;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
@Entity
@Table(name = "skill_map")
public class SkillMap {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @NotNull
    @Column(name = "rol_id")
    private Long rolId;
    @NotNull
    @Column(name = "grado")
    private String grado;
    @NotNull
    @Column(name = "skill_id")
    private Long skillId;
    @NotNull
    @Min(1)
    @Max(5)
    @Column(name = "nivel_base")
    private Integer nivelBase;
    // getters and setters
}


// Archivo: src/main/java/com/skillmap/backend/model/Categoria.java

package com.skillmap.backend.model;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.validation.constraints.NotBlank;
@Entity
public class Categoria {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @NotBlank
    private String nombre;
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getNombre() {
        return nombre;
    }
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
}


// Archivo: src/main/java/com/skillmap/backend/controller/SkillController.java

package com.skillmap.backend.controller;
import com.skillmap.backend.model.Contenido;
import com.skillmap.backend.service.ContenidoService;
import com.skillmap.backend.service.SkillService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
@RestController
@RequestMapping("/api/skill")
public class SkillController {
    @Autowired
    private SkillService skillService;
    @Autowired
    private ContenidoService contenidoService;
    // existing methods
    @PostMapping("/{id}/contenido")
    public Contenido createContenido(@PathVariable Long id, @RequestBody Contenido contenido) {
        contenido.setSkill_id(id);
        return contenidoService.save(contenido);
    }
    @GetMapping("/{id}/contenido/{contenidoId}")
    public Contenido getContenido(@PathVariable Long id, @PathVariable Long contenidoId) {
        Contenido contenido = contenidoService.get(contenidoId);
        if (contenido != null && contenido.getSkill_id().equals(id)) {
            return contenido;
        }
        return null;
    }
    @PutMapping("/{id}/contenido")
    public Contenido updateContenido(@PathVariable Long id, @RequestBody Contenido contenido) {
        if (contenido.getSkill_id().equals(id)) {
            return contenidoService.update(contenido);
        }
        return null;
    }
    @DeleteMapping("/{id}/contenido/{contenidoId}")
    public void deleteContenido(@PathVariable Long id, @PathVariable Long contenidoId) {
        Contenido contenido = contenidoService.get(contenidoId);
        if (contenido != null && contenido.getSkill_id().equals(id)) {
            contenidoService.delete(contenidoId);
        }
    }
}


// Archivo: src/main/java/com/skillmap/backend/controller/CategoriaController.java

package com.skillmap.backend.controller;
import com.skillmap.backend.model.Categoria;
import com.skillmap.backend.service.CategoriaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
@RestController
@RequestMapping("/categorias")
public class CategoriaController {
    @Autowired
    private CategoriaService categoriaService;
    @PostMapping
    public Categoria createCategoria(@RequestBody Categoria categoria) {
        return categoriaService.createCategoria(categoria);
    }
    @GetMapping
    public Iterable<Categoria> getAllCategorias() {
        return categoriaService.getAllCategorias();
    }
    @PutMapping("/{id}")
    public Categoria updateCategoria(@PathVariable Long id, @RequestBody Categoria categoria) {
        return categoriaService.updateCategoria(id, categoria);
    }
    @DeleteMapping("/{id}")
    public void deleteCategoria(@PathVariable Long id) {
        categoriaService.deleteCategoria(id);
    }
}


// Archivo: src/main/java/com/skillmap/backend/controller/ContenidoController.java

package com.skillmap.backend.controller;
import com.skillmap.backend.model.Contenido;
import com.skillmap.backend.service.ContenidoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
@RestController
@RequestMapping("/api/contenido")
public class ContenidoController {
    @Autowired
    private ContenidoService contenidoService;
    @PostMapping
    public Contenido create(@RequestBody Contenido contenido) {
        return contenidoService.save(contenido);
    }
    @GetMapping("/{id}")
    public Contenido get(@PathVariable Long id) {
        return contenidoService.get(id);
    }
    @PutMapping
    public Contenido update(@RequestBody Contenido contenido) {
        return contenidoService.update(contenido);
    }
    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        contenidoService.delete(id);
    }
}


// Archivo: src/main/java/com/skillmap/backend/controller/RolController.java

package com.skillmap.backend.controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.skillmap.backend.model.Rol;
import com.skillmap.backend.service.RolService;
@RestController
@RequestMapping("/api/roles")
public class RolController {
    private final RolService rolService;
    @Autowired
    public RolController(RolService rolService) {
        this.rolService = rolService;
    }
    @PostMapping
    public ResponseEntity<Rol> createRol(@RequestBody Rol rol) {
        Rol savedRol = rolService.saveRol(rol);
        return new ResponseEntity<>(savedRol, HttpStatus.CREATED);
    }
}


// Archivo: src/main/java/com/skillmap/backend/controller/SkillMapController.java

package com.skillmap.backend.controller;
import com.skillmap.backend.model.SkillMap;
import com.skillmap.backend.service.SkillMapService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
@RestController
@RequestMapping("/api/skillmap")
public class SkillMapController {
    private final SkillMapService skillMapService;
    @Autowired
    public SkillMapController(SkillMapService skillMapService) {
        this.skillMapService = skillMapService;
    }
    @PostMapping
    public ResponseEntity<SkillMap> createSkillMap(@RequestBody SkillMap skillMap) {
        return ResponseEntity.ok(skillMapService.saveSkillMap(skillMap));
    }
}


// Archivo: src/main/java/com/skillmap/backend/repository/SkillMapRepository.java

package com.skillmap.backend.repository;
import com.skillmap.backend.model.SkillMap;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
@Repository
public interface SkillMapRepository extends JpaRepository<SkillMap, Long> {
}


// Archivo: src/main/java/com/skillmap/backend/repository/ContenidoRepository.java

package com.skillmap.backend.repository;
import com.skillmap.backend.model.Contenido;
import org.springframework.data.jpa.repository.JpaRepository;
public interface ContenidoRepository extends JpaRepository<Contenido, Long> {
}


// Archivo: src/main/java/com/skillmap/backend/repository/SkillRepository.java

package com.skillmap.backend.repository;
import com.skillmap.backend.model.Skill;
import org.springframework.data.repository.CrudRepository;
public interface SkillRepository extends CrudRepository<Skill, Long> {
}


// Archivo: src/main/java/com/skillmap/backend/repository/RolRepository.java

package com.skillmap.backend.repository;
import org.springframework.data.jpa.repository.JpaRepository;
import com.skillmap.backend.model.Rol;
public interface RolRepository extends JpaRepository<Rol, Long> {
}


// Archivo: src/main/java/com/skillmap/backend/repository/CategoriaRepository.java

package com.skillmap.backend.repository;
import com.skillmap.backend.model.Categoria;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
@Repository
public interface CategoriaRepository extends JpaRepository<Categoria, Long> {
    boolean existsByNombre(String nombre);
}


// Archivo: src/main/java/com/skillmap/backend/service/ContenidoService.java

package com.skillmap.backend.service;
import com.skillmap.backend.model.Contenido;
import com.skillmap.backend.repository.ContenidoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
@Service
public class ContenidoService {
    @Autowired
    private ContenidoRepository contenidoRepository;
    public Contenido save(Contenido contenido) {
        return contenidoRepository.save(contenido);
    }
    public Contenido get(Long id) {
        return contenidoRepository.findById(id).orElse(null);
    }
    public Contenido update(Contenido contenido) {
        return contenidoRepository.save(contenido);
    }
    public void delete(Long id) {
        contenidoRepository.deleteById(id);
    }
}


// Archivo: src/main/java/com/skillmap/backend/service/SkillService.java

package com.skillmap.backend.service;
import com.skillmap.backend.model.Contenido;
import com.skillmap.backend.repository.ContenidoRepository;
import com.skillmap.backend.repository.SkillRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
@Service
public class SkillService {
    @Autowired
    private SkillRepository skillRepository;
    @Autowired
    private ContenidoRepository contenidoRepository;
    // existing methods
    public Contenido saveContenido(Contenido contenido) {
        return contenidoRepository.save(contenido);
    }
    public Contenido getContenido(Long id) {
        return contenidoRepository.findById(id).orElse(null);
    }
    public Contenido updateContenido(Contenido contenido) {
        return contenidoRepository.save(contenido);
    }
    public void deleteContenido(Long id) {
        contenidoRepository.deleteById(id);
    }
}


// Archivo: src/main/java/com/skillmap/backend/service/SkillMapService.java

package com.skillmap.backend.service;
import com.skillmap.backend.model.SkillMap;
import com.skillmap.backend.repository.SkillMapRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
@Service
public class SkillMapService {
    private final SkillMapRepository skillMapRepository;
    @Autowired
    public SkillMapService(SkillMapRepository skillMapRepository) {
        this.skillMapRepository = skillMapRepository;
    }
    public SkillMap saveSkillMap(SkillMap skillMap) {
        return skillMapRepository.save(skillMap);
    }
}


// Archivo: src/main/java/com/skillmap/backend/service/RolService.java

package com.skillmap.backend.service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.skillmap.backend.model.Rol;
import com.skillmap.backend.repository.RolRepository;
@Service
public class RolService {
    private final RolRepository rolRepository;
    @Autowired
    public RolService(RolRepository rolRepository) {
        this.rolRepository = rolRepository;
    }
    public Rol saveRol(Rol rol) {
        return rolRepository.save(rol);
    }
    public Iterable<Rol> getAllRoles() {
        return rolRepository.findAll();
    }
}


// Archivo: src/main/java/com/skillmap/backend/service/CategoriaService.java

package com.skillmap.backend.service;
import com.skillmap.backend.model.Categoria;
import com.skillmap.backend.repository.CategoriaRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
@Service
public class CategoriaService {
    @Autowired
    private CategoriaRepository categoriaRepository;
    public Categoria createCategoria(Categoria categoria) {
        if (categoriaRepository.existsByNombre(categoria.getNombre())) {
            throw new IllegalArgumentException("El nombre de la categoría ya existe");
        }
        return categoriaRepository.save(categoria);
    }
    public Iterable<Categoria> getAllCategorias() {
        return categoriaRepository.findAll();
    }
    public Categoria updateCategoria(Long id, Categoria categoria) {
        if (!categoriaRepository.existsById(id)) {
            throw new IllegalArgumentException("La categoría no existe");
        }
        if (categoriaRepository.existsByNombre(categoria.getNombre())) {
            throw new IllegalArgumentException("El nombre de la categoría ya existe");
        }
        categoria.setId(id);
        return categoriaRepository.save(categoria);
    }
    public void deleteCategoria(Long id) {
        if (!categoriaRepository.existsById(id)) {
            throw new IllegalArgumentException("La categoría no existe");
        }
        categoriaRepository.deleteById(id);
    }
}


// Archivo: src/main/java/com/skillmap/backend/BackendApplication.java

package com.skillmap.backend;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BackendApplication {

	public static void main(String[] args) {
		SpringApplication.run(BackendApplication.class, args);
	}

}

--- ANÁLISIS DE CLASES EXISTENTES ---
Genera una tabla Markdown como esta:

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| Employee | com.example.EmployeeCoreApi.model | REUTILIZABLE-AS-IS | Contiene atributo `gender` |
| EmployeeServiceImpl | com.example.EmployeeCoreApi.service.impl | MODIFICABLE | Debe validar antes de borrar |
| CannotDeleteEmployeeException | com.example.EmployeeCoreApi.exception | NUEVA | Requerida para lanzar excepción |
| EmployeeServiceImplTest | com.example.EmployeeCoreApi.service.impl | NUEVA | Pruebas unitarias de validación |

--- INSTRUCCIONES DE MODIFICACIÓN ---
- No eliminar ni reemplazar lógica existente.
- Si se modifica un método, incluirlo completo con el nuevo código y lo que ya tenía.
- Solo generar clases nuevas si están indicadas como NUEVA.
- Cada clase debe estar en su package correcto, según lo indicado en la tabla.
- NO repetir clases ya existentes si no cambian.
- NO eliminar los métodos existentes a menos que sea necesario
- NO reemplazar métodos u otro contenido de las clases existentes por comentarios entre líneas
- Solo considerar como existente una clase si está listada explícitamente en "CLASES DISPONIBLES EN EL PROYECTO".
- No debes asumir la existencia de clases que no aparecen explícitamente en la sección anterior. Si alguna clase no está listada entre las clases disponibles ni aparece en el código entregado, debe considerarse INEXISTENTE y marcada como NUEVA en el análisis.
- Si una clase no aparece listada, asumir que es NUEVA.
- Si una clase herada de otra clase o importa una interfaz propia del proyecto asegúrate que esta esté entre las clases existentes o genera el código respectivo de no existir previamente

--- CÓDIGO A GENERAR ---
Devuelve solo clases Java válidas. Cada bloque debe comenzar con `package ...`.
Incluye los tests JUnit5 en el mismo formato si aplica.
