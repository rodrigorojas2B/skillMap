

--- HISTORIA DE USUARIO ---
- id: HDU001
  title: Crear y gestionar categorías de skills
**Historia de Usuario:**  
Como **administrador**,  
quiero **crear, listar, actualizar y eliminar categorías de skills desde la interfaz web**,  
para **estructurar el catálogo de habilidades,  facilitar su búsqueda y permitir filtrarlas por categoría**.

**Criterios de Aceptación:**  
- *Dado* que el administrador accede a  la sección de categorías, *cuando* crea una nueva categoría con un nombre válido, *entonces* la categoría aparece en la lista y se muestra un mensaje de confirmación.  
- *Dado* que el administrador intenta crear una categoría sin nombre, *cuando* intenta guardarla, *entonces* el sistema bloquea la acción y muestra un mensaje de error indicando que el nombre es obligatorio.  
- *Dado* que el administrador  intenta crear una categoría con un nombre ya existente, *cuando* intenta guardarla, *entonces* el sistema muestra un mensaje de error indicando que la categoría ya existe.  
- *Dado* que una categoría está asignada a uno o más skills, *cuando* el administrador intenta eliminarla, *entonces* el sistema impide la acción y muestra un mensaje de advertencia.  
- *Dado* que el administrador edita una categoría existente con un nombre válido y no duplicado, *cuando* guarda los cambios, *entonces* la actualización se refleja en la lista y se muestra un mensaje de éxito.

**Notas Adicionales:**  
- No se identifican restricciones técnicas ni no funcionales relevantes para esta historia.

**Prioridad:** TBD  
**Etiqueta/Epic:** Gestión de Skills



--- MODELO DE DATOS DEL PROYECTO ---

-- Tabla de categorías de skills
CREATE TABLE categoria (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(30) NOT NULL
);

-- Tabla de skills, asociadas a categoría
CREATE TABLE skill (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(30) NOT NULL,
    categoria_id INT REFERENCES categoria(id)
);

-- Contenido asociado a skills, diseñado para un nivel específico (1 a 5)
CREATE TABLE contenido (
    id SERIAL PRIMARY KEY,
    nivel INT CHECK (nivel BETWEEN 1 AND 5),
    url_curso TEXT,
    url_test TEXT,
    skill_id INT REFERENCES skill(id)
);

-- Especialidades técnicas
CREATE TABLE especialidad (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL
);

-- Roles técnicos (ej. Dev Backend), asociados a una especialidad
CREATE TABLE rol (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(30) NOT NULL,
    descripcion VARCHAR(100),
    especialidad_id INT REFERENCES especialidad(id),
    grado VARCHAR(20) CHECK (grado IN ('Trainee','Junior','Pleno','Semi-Senior','Senior','Experto'))
);

-- Nivel esperado por skill en función del rol y grado
CREATE TABLE skill_map (
    id SERIAL PRIMARY KEY,
    rol_id INT REFERENCES rol(id),
    skill_id INT REFERENCES skill(id),
    grado VARCHAR(20) CHECK (grado IN ('Trainee','Junior','Pleno','Semi-Senior','Senior','Experto')),
    nivel_base INT CHECK (nivel_base BETWEEN 1 AND 5),
    UNIQUE (rol_id, skill_id, grado)
);

-- Información de colaboradores
CREATE TABLE colaborador (
    id VARCHAR(20) PRIMARY KEY, -- Puede ser RUT, DNI, etc.
    nombre VARCHAR(30) NOT NULL,
    paterno VARCHAR(30),
    materno VARCHAR(30),
    vigente BOOLEAN DEFAULT TRUE,
    id_calibrador_actual VARCHAR(20) REFERENCES colaborador(id)
);

-- Evaluación de un colaborador en una fecha determinada
CREATE TABLE skill_fit (
    id SERIAL PRIMARY KEY,
    fecha_autoeval DATE,
    fecha_calibracion DATE,
    descripcion VARCHAR(100),
    id_colaborador VARCHAR(20) REFERENCES colaborador(id),
    id_calibrador VARCHAR(20) REFERENCES colaborador(id)
);

-- Evaluación individual por skill dentro de una sesión (fit)
CREATE TABLE skill_eval (
    id SERIAL PRIMARY KEY,
    nivel_autoeval INT CHECK (nivel_autoeval BETWEEN 1 AND 5),
    nivel_calibrado INT CHECK (nivel_calibrado BETWEEN 1 AND 5),
    observaciones VARCHAR(100),
    nota_test NUMERIC(5,2),
    url_evidencia TEXT,
    id_skill_fit INT REFERENCES skill_fit(id),
    id_skill INT REFERENCES skill(id)
);


--- CLASES DISPONIBLES EN EL PROYECTO ---
BackendApplication


--- CÓDIGO EXISTENTE DEL PROYECTO ---


// Archivo: src/main/java/com/skillmap/backend/BackendApplication.java

package com.skillmap.backend;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BackendApplication {

	public static void main(String[] args) {
		SpringApplication.run(BackendApplication.class, args);
	}

}
--- DISEÑO DEL FLUJO NECESARIO PARA LA HDU ---
  Antes de analizar las clases existentes, define lo siguiente:
  
  1. ¿Cuál es la API REST esperada para implementar la historia de usuario? Define el o los endpoints requeridos, con sus métodos (GET/POST/etc), path y parámetros de entrada/salida.
  
  2. ¿Qué operaciones de negocio se requieren y cómo se deberían estructurar los servicios? Define los métodos clave del servicio y su lógica general.
  
  3. ¿Qué entidades (modelos o entidades JPA) se necesitan para representar los datos manejados por la historia de usuario? Enumera los nombres esperados y atributos principales.
  
  4. ¿Cuál sería el flujo general desde el Controller hasta el Repository y la Entity? Describe paso a paso cómo viaja la información, incluyendo las clases involucradas y cómo se relacionan.
  
  Este diseño preliminar será usado para identificar qué clases son necesarias.
  
--- ANÁLISIS DE CLASES EXISTENTES ---
Ahora, en base al diseño anterior, analiza las clases del proyecto actual y genera una tabla Markdown como esta:

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| Employee | com.example.EmployeeCoreApi.model | REUTILIZABLE-AS-IS | Contiene atributo `gender` utilizado para validación en el servicio |
| EmployeeServiceImpl | com.example.EmployeeCoreApi.service.impl | MODIFICABLE | Se requiere agregar lógica de validación según la HDU |
| CannotDeleteEmployeeException | com.example.EmployeeCoreApi.exception | NUEVA | Necesaria para lanzar error si se intenta borrar empleado no permitido |

--- CRITERIOS IMPORTANTES ---
- Solo deben incluirse en la tabla las clases que **realmente participan en el flujo de implementación** de la historia de usuario.
- No incluyas clases que no se usan o que no están relacionadas con los pasos definidos anteriormente.
- Una clase solo debe marcarse como `REUTILIZABLE-AS-IS` si se utiliza tal como está, sin modificaciones.
- Si una clase ya existe pero necesita modificaciones, márcala como `MODIFICABLE` y explica por qué.
- Si se necesita una clase que no existe, márcala como `NUEVA` y justifica su creación.
- Usa el modelo de datos proporcionado en `modelo.sql` como referencia para las entidades.
- No asumas la existencia de clases que no estén listadas ni presentes en el código entregado.

--- FORMATO DE RESPUESTA ---
Primero entrega el diseño de API, flujo y entidades como texto estructurado.
Luego, entrega la tabla Markdown con la clasificación de clases relevantes.

--- INSTRUCCIONES DE MODIFICACIÓN ---
- No eliminar ni reemplazar lógica existente.
- Si se modifica un método, incluirlo completo con el nuevo código y lo que ya tenía.
- Solo generar clases nuevas si están indicadas como NUEVA.
- Cada clase debe estar en su package correcto, según lo indicado en la tabla.
- NO repetir clases ya existentes si no cambian.
- NO eliminar los métodos existentes a menos que sea necesario.
- NO reemplazar métodos u otro contenido de las clases existentes por comentarios entre líneas.
- Solo considerar como existente una clase si está listada explícitamente en "CLASES DISPONIBLES EN EL PROYECTO".
- No debes asumir la existencia de clases que no aparecen explícitamente en la sección anterior. Si alguna clase no está listada entre las clases disponibles ni aparece en el código entregado, debe considerarse INEXISTENTE y marcada como NUEVA en el análisis.
- Si una clase no aparece listada, asumir que es NUEVA.
- Solo deben incluirse en el análisis (tabla Markdown) las clases que sean relevantes para implementar la historia de usuario evaluada. Esto incluye clases que serán reutilizadas, modificadas o sirven de base para nuevas clases (por ejemplo, clases base o entidades relacionadas).
- Si una clase del proyecto no se usa en el flujo de la historia evaluada, NO la incluyas en la tabla, aunque esté disponible.
- Una clase solo debe marcarse como `REUTILIZABLE-AS-IS` si va a ser efectivamente utilizada **sin modificaciones** como parte del cumplimiento de la historia de usuario.
- El objetivo es enfocarse en el subconjunto mínimo de clases necesarias para implementar la funcionalidad, y no generar ruido con clases irrelevantes al caso de uso.          
- Si una clase hereda de otra clase o importa una interfaz propia del proyecto asegúrate de que esta esté entre las clases existentes o genera el código respectivo de no existir previamente.
- El archivo modelo.sql contiene la definición del modelo de datos. Úsalo como referencia para determinar qué entidades, atributos o estructuras deben mapearse a clases Java.
- Si una tabla existe en el modelo.sql pero no tiene clase correspondiente en las clases existentes, debes proponer una clase NUEVA que la represente.
- Si ya existe una clase que representa una tabla, debes indicar si puede reutilizarse o si debe modificarse, justificando tu decisión.
- Utiliza nombres de clases y atributos consistentes con las tablas y columnas del modelo.sql, aplicando convenciones Java (camelCase, PascalCase).
- Las clases sugeridas deben estar todas dentro de la tabla Markdown con el detalle de si es REUTILIZABLE-AS-IS, MODIFICABLE o NUEVA.

--- CÓDIGO A GENERAR ---
Devuelve solo clases Java válidas. Cada  bloque debe comenzar con `package ...`.
Incluye los tests JUnit5 en el mismo formato si aplica.
