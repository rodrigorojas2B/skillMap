{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador de código Java. Devuelve solo clases completas y compilables."
    },
    {
      "role": "user",
      "content": "--- PLAN DE CORRECCIÓN ---\nEl error de compilación se encuentra en el archivo Rol.java en la línea 26. El compilador no puede encontrar el símbolo 'Especialidad', que se supone que es una clase.\n\nPlan de corrección:\n\n1. Verificar la existencia de la clase 'Especialidad':\n   Primero, debemos verificar si la clase 'Especialidad' existe en el proyecto. Si no existe, debemos crearla en el paquete correcto.\n\n2. Importar la clase 'Especialidad':\n   Si la clase 'Especialidad' existe, entonces el problema puede ser que no se ha importado en la clase 'Rol'. En este caso, debemos agregar la declaración de importación en la parte superior de la clase 'Rol'. La declaración de importación debe ser similar a 'import com.skillmap.backend.model.Especialidad;'\n\n3. Verificar la ruta del paquete de la clase 'Especialidad':\n   Si la clase 'Especialidad' existe y ya se ha importado en la clase 'Rol', entonces el problema puede ser que la ruta del paquete de la clase 'Especialidad' es incorrecta. En este caso, debemos corregir la ruta del paquete de la clase 'Especialidad'.\n\n4. Verificar la visibilidad de la clase 'Especialidad':\n   Si la clase 'Especialidad' existe, se ha importado en la clase 'Rol' y la ruta del paquete es correcta, entonces el problema puede ser que la clase 'Especialidad' no es visible para la clase 'Rol'. En este caso, debemos cambiar la visibilidad de la clase 'Especialidad' a 'public'.\n\n5. Compilar y probar:\n   Después de realizar los cambios, debemos compilar el proyecto nuevamente para verificar si el problema se ha resuelto. Si la compilación es exitosa, debemos ejecutar las pruebas para asegurarnos de que no haya otros problemas.\n\nClases relacionadas:\n- Rol.java\n- Especialidad.java (si existe)\n\n--- CÓDIGO ACTUAL CON ERROR ---\n\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/model/Contenido.java ---\npackage com.skillmap.backend.model;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Column;\nimport jakarta.validation.constraints.Max;\nimport jakarta.validation.constraints.Min;\nimport jakarta.validation.constraints.NotNull;\n@Entity\npublic class Contenido {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    @NotNull\n    @Min(1)\n    @Max(5)\n    private Integer nivel;\n    @NotNull\n    @Column(length = 500)\n    private String url_curso;\n    @NotNull\n    @Column(length = 500)\n    private String url_test;\n    @NotNull\n    private Long skill_id;\n    // getters and setters\n    public Long getId() {\n        return id;\n    }\n    public void setId(Long id) {\n        this.id = id;\n    }\n    public Integer getNivel() {\n        return nivel;\n    }\n    public void setNivel(Integer nivel) {\n        this.nivel = nivel;\n    }\n    public String getUrl_curso() {\n        return url_curso;\n    }\n    public void setUrl_curso(String url_curso) {\n        this.url_curso = url_curso;\n    }\n    public String getUrl_test() {\n        return url_test;\n    }\n    public void setUrl_test(String url_test) {\n        this.url_test = url_test;\n    }\n    public Long getSkill_id() {\n        return skill_id;\n    }\n    public void setSkill_id(Long skill_id) {\n        this.skill_id = skill_id;\n    }\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/model/Skill.java ---\npackage com.skillmap.backend.model;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.validation.constraints.NotNull;\n@Entity\npublic class Skill {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n    @NotNull\n    private String nombre;\n    @ManyToOne\n    @NotNull\n    private Categoria categoria;\n    public Long getId() {\n        return id;\n    }\n    public void setId(Long id) {\n        this.id = id;\n    }\n    public String getNombre() {\n        return nombre;\n    }\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n    public Categoria getCategoria() {\n        return categoria;\n    }\n    public void setCategoria(Categoria categoria) {\n        this.categoria = categoria;\n    }\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/model/Rol.java ---\npackage com.skillmap.backend.model;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\n@Entity\npublic class Rol {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    @NotBlank\n    @Column(unique = true)\n    private String nombre;\n    @NotBlank\n    private String descripcion;\n    @NotNull\n    @ManyToOne\n    @JoinColumn(name = \"especialidad_id\", nullable = false)\n    private Especialidad especialidad;\n    @NotNull\n    @Enumerated(EnumType.STRING)\n    private Grado grado;\n    public enum Grado {\n        TRAINEE, JUNIOR, PLENO, SEMI_SENIOR, SENIOR, EXPERTO\n    }\n    // getters and setters\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/model/Categoria.java ---\npackage com.skillmap.backend.model;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.validation.constraints.NotBlank;\n@Entity\npublic class Categoria {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    @NotBlank\n    private String nombre;\n    public Long getId() {\n        return id;\n    }\n    public void setId(Long id) {\n        this.id = id;\n    }\n    public String getNombre() {\n        return nombre;\n    }\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/controller/SkillController.java ---\npackage com.skillmap.backend.controller;\nimport com.skillmap.backend.model.Contenido;\nimport com.skillmap.backend.service.ContenidoService;\nimport com.skillmap.backend.service.SkillService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n@RestController\n@RequestMapping(\"/api/skill\")\npublic class SkillController {\n    @Autowired\n    private SkillService skillService;\n    @Autowired\n    private ContenidoService contenidoService;\n    // existing methods\n    @PostMapping(\"/{id}/contenido\")\n    public Contenido createContenido(@PathVariable Long id, @RequestBody Contenido contenido) {\n        contenido.setSkill_id(id);\n        return contenidoService.save(contenido);\n    }\n    @GetMapping(\"/{id}/contenido/{contenidoId}\")\n    public Contenido getContenido(@PathVariable Long id, @PathVariable Long contenidoId) {\n        Contenido contenido = contenidoService.get(contenidoId);\n        if (contenido != null && contenido.getSkill_id().equals(id)) {\n            return contenido;\n        }\n        return null;\n    }\n    @PutMapping(\"/{id}/contenido\")\n    public Contenido updateContenido(@PathVariable Long id, @RequestBody Contenido contenido) {\n        if (contenido.getSkill_id().equals(id)) {\n            return contenidoService.update(contenido);\n        }\n        return null;\n    }\n    @DeleteMapping(\"/{id}/contenido/{contenidoId}\")\n    public void deleteContenido(@PathVariable Long id, @PathVariable Long contenidoId) {\n        Contenido contenido = contenidoService.get(contenidoId);\n        if (contenido != null && contenido.getSkill_id().equals(id)) {\n            contenidoService.delete(contenidoId);\n        }\n    }\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/controller/CategoriaController.java ---\npackage com.skillmap.backend.controller;\nimport com.skillmap.backend.model.Categoria;\nimport com.skillmap.backend.service.CategoriaService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n@RestController\n@RequestMapping(\"/categorias\")\npublic class CategoriaController {\n    @Autowired\n    private CategoriaService categoriaService;\n    @PostMapping\n    public Categoria createCategoria(@RequestBody Categoria categoria) {\n        return categoriaService.createCategoria(categoria);\n    }\n    @GetMapping\n    public Iterable<Categoria> getAllCategorias() {\n        return categoriaService.getAllCategorias();\n    }\n    @PutMapping(\"/{id}\")\n    public Categoria updateCategoria(@PathVariable Long id, @RequestBody Categoria categoria) {\n        return categoriaService.updateCategoria(id, categoria);\n    }\n    @DeleteMapping(\"/{id}\")\n    public void deleteCategoria(@PathVariable Long id) {\n        categoriaService.deleteCategoria(id);\n    }\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/controller/ContenidoController.java ---\npackage com.skillmap.backend.controller;\nimport com.skillmap.backend.model.Contenido;\nimport com.skillmap.backend.service.ContenidoService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n@RestController\n@RequestMapping(\"/api/contenido\")\npublic class ContenidoController {\n    @Autowired\n    private ContenidoService contenidoService;\n    @PostMapping\n    public Contenido create(@RequestBody Contenido contenido) {\n        return contenidoService.save(contenido);\n    }\n    @GetMapping(\"/{id}\")\n    public Contenido get(@PathVariable Long id) {\n        return contenidoService.get(id);\n    }\n    @PutMapping\n    public Contenido update(@RequestBody Contenido contenido) {\n        return contenidoService.update(contenido);\n    }\n    @DeleteMapping(\"/{id}\")\n    public void delete(@PathVariable Long id) {\n        contenidoService.delete(id);\n    }\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/controller/RolController.java ---\npackage com.skillmap.backend.controller;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport com.skillmap.backend.model.Rol;\nimport com.skillmap.backend.service.RolService;\n@RestController\n@RequestMapping(\"/api/roles\")\npublic class RolController {\n    private final RolService rolService;\n    @Autowired\n    public RolController(RolService rolService) {\n        this.rolService = rolService;\n    }\n    @PostMapping\n    public ResponseEntity<Rol> createRol(@RequestBody Rol rol) {\n        Rol savedRol = rolService.saveRol(rol);\n        return new ResponseEntity<>(savedRol, HttpStatus.CREATED);\n    }\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/repository/ContenidoRepository.java ---\npackage com.skillmap.backend.repository;\nimport com.skillmap.backend.model.Contenido;\nimport org.springframework.data.jpa.repository.JpaRepository;\npublic interface ContenidoRepository extends JpaRepository<Contenido, Long> {\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/repository/SkillRepository.java ---\npackage com.skillmap.backend.repository;\nimport com.skillmap.backend.model.Skill;\nimport org.springframework.data.repository.CrudRepository;\npublic interface SkillRepository extends CrudRepository<Skill, Long> {\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/repository/RolRepository.java ---\npackage com.skillmap.backend.repository;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport com.skillmap.backend.model.Rol;\npublic interface RolRepository extends JpaRepository<Rol, Long> {\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/repository/CategoriaRepository.java ---\npackage com.skillmap.backend.repository;\nimport com.skillmap.backend.model.Categoria;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n@Repository\npublic interface CategoriaRepository extends JpaRepository<Categoria, Long> {\n    boolean existsByNombre(String nombre);\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/service/ContenidoService.java ---\npackage com.skillmap.backend.service;\nimport com.skillmap.backend.model.Contenido;\nimport com.skillmap.backend.repository.ContenidoRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n@Service\npublic class ContenidoService {\n    @Autowired\n    private ContenidoRepository contenidoRepository;\n    public Contenido save(Contenido contenido) {\n        return contenidoRepository.save(contenido);\n    }\n    public Contenido get(Long id) {\n        return contenidoRepository.findById(id).orElse(null);\n    }\n    public Contenido update(Contenido contenido) {\n        return contenidoRepository.save(contenido);\n    }\n    public void delete(Long id) {\n        contenidoRepository.deleteById(id);\n    }\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/service/SkillService.java ---\npackage com.skillmap.backend.service;\nimport com.skillmap.backend.model.Contenido;\nimport com.skillmap.backend.repository.ContenidoRepository;\nimport com.skillmap.backend.repository.SkillRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n@Service\npublic class SkillService {\n    @Autowired\n    private SkillRepository skillRepository;\n    @Autowired\n    private ContenidoRepository contenidoRepository;\n    // existing methods\n    public Contenido saveContenido(Contenido contenido) {\n        return contenidoRepository.save(contenido);\n    }\n    public Contenido getContenido(Long id) {\n        return contenidoRepository.findById(id).orElse(null);\n    }\n    public Contenido updateContenido(Contenido contenido) {\n        return contenidoRepository.save(contenido);\n    }\n    public void deleteContenido(Long id) {\n        contenidoRepository.deleteById(id);\n    }\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/service/RolService.java ---\npackage com.skillmap.backend.service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport com.skillmap.backend.model.Rol;\nimport com.skillmap.backend.repository.RolRepository;\n@Service\npublic class RolService {\n    private final RolRepository rolRepository;\n    @Autowired\n    public RolService(RolRepository rolRepository) {\n        this.rolRepository = rolRepository;\n    }\n    public Rol saveRol(Rol rol) {\n        return rolRepository.save(rol);\n    }\n    public Iterable<Rol> getAllRoles() {\n        return rolRepository.findAll();\n    }\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/service/CategoriaService.java ---\npackage com.skillmap.backend.service;\nimport com.skillmap.backend.model.Categoria;\nimport com.skillmap.backend.repository.CategoriaRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n@Service\npublic class CategoriaService {\n    @Autowired\n    private CategoriaRepository categoriaRepository;\n    public Categoria createCategoria(Categoria categoria) {\n        if (categoriaRepository.existsByNombre(categoria.getNombre())) {\n            throw new IllegalArgumentException(\"El nombre de la categoría ya existe\");\n        }\n        return categoriaRepository.save(categoria);\n    }\n    public Iterable<Categoria> getAllCategorias() {\n        return categoriaRepository.findAll();\n    }\n    public Categoria updateCategoria(Long id, Categoria categoria) {\n        if (!categoriaRepository.existsById(id)) {\n            throw new IllegalArgumentException(\"La categoría no existe\");\n        }\n        if (categoriaRepository.existsByNombre(categoria.getNombre())) {\n            throw new IllegalArgumentException(\"El nombre de la categoría ya existe\");\n        }\n        categoria.setId(id);\n        return categoriaRepository.save(categoria);\n    }\n    public void deleteCategoria(Long id) {\n        if (!categoriaRepository.existsById(id)) {\n            throw new IllegalArgumentException(\"La categoría no existe\");\n        }\n        categoriaRepository.deleteById(id);\n    }\n}\n\n--- ARCHIVO: src/main/java/com/skillmap/backend/BackendApplication.java ---\npackage com.skillmap.backend;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class BackendApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(BackendApplication.class, args);\n\t}\n\n}\n\n--- INSTRUCCIONES ---\nCorrige el código según el plan. Devuelve solo clases completas y compilables.\\n✅ REGLAS:\\n1. Modifica exclusivamente las clases indicadas.\\n2. No elimines atributos ni métodos existentes, salvo que esté indicado.\\n3. Cada clase debe comenzar con 'package ...' y tener imports válidos.\\n4. No entregues comentarios, explicaciones, ni bloques Markdown.\\n5. Devuelve únicamente el código fuente válido, sin encabezados.\\n"
    }
  ],
  "temperature": 0.3
}
