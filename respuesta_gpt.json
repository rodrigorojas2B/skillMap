{
  "id": "chatcmpl-BufFIdmnPN9yylv9JlKxbN9aLX7Nb",
  "object": "chat.completion",
  "created": 1752844616,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "```java\npackage com.skillmap.backend.model;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.validation.constraints.NotBlank;\nimport lombok.Data;\n\n@Data\n@Entity\npublic class Categoria {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @NotBlank\n    private String nombre;\n}\n```\n\n```java\npackage com.skillmap.backend.model;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.validation.constraints.NotBlank;\nimport lombok.Data;\n\n@Data\n@Entity\npublic class Skill {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @NotBlank\n    private String nombre;\n\n    @ManyToOne\n    private Categoria categoria;\n}\n```\n\n```java\npackage com.skillmap.backend.repository;\n\nimport com.skillmap.backend.model.Categoria;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface CategoriaRepository extends JpaRepository<Categoria, Long> {\n\n    boolean existsByNombre(String nombre);\n}\n```\n\n```java\npackage com.skillmap.backend.repository;\n\nimport com.skillmap.backend.model.Categoria;\nimport com.skillmap.backend.model.Skill;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface SkillRepository extends JpaRepository<Skill, Long> {\n\n    boolean existsByCategoria(Categoria categoria);\n}\n```\n\n```java\npackage com.skillmap.backend.service;\n\nimport com.skillmap.backend.model.Categoria;\nimport com.skillmap.backend.repository.CategoriaRepository;\nimport com.skillmap.backend.repository.SkillRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class CategoriaService {\n\n    @Autowired\n    private CategoriaRepository categoriaRepository;\n\n    @Autowired\n    private SkillRepository skillRepository;\n\n    public Categoria crearCategoria(Categoria categoria) {\n        if (categoria.getNombre() == null || categoria.getNombre().isEmpty()) {\n            throw new IllegalArgumentException(\"El nombre de la categoría no puede estar vacío.\");\n        }\n        if (categoriaRepository.existsByNombre(categoria.getNombre())) {\n            throw new IllegalArgumentException(\"Ya existe una categoría con ese nombre.\");\n        }\n        return categoriaRepository.save(categoria);\n    }\n\n    public List<Categoria> listarCategorias() {\n        return categoriaRepository.findAll();\n    }\n\n    public Categoria actualizarCategoria(Long id, Categoria categoria) {\n        if (categoria.getNombre() == null || categoria.getNombre().isEmpty()) {\n            throw new IllegalArgumentException(\"El nombre de la categoría no puede estar vacío.\");\n        }\n        if (categoriaRepository.existsByNombre(categoria.getNombre())) {\n            throw new IllegalArgumentException(\"Ya existe una categoría con ese nombre.\");\n        }\n        Categoria categoriaExistente = categoriaRepository.findById(id).orElseThrow(() -> new IllegalArgumentException(\"La categoría no existe.\"));\n        categoriaExistente.setNombre(categoria.getNombre());\n        return categoriaRepository.save(categoriaExistente);\n    }\n\n    public void eliminarCategoria(Long id) {\n        Categoria categoria = categoriaRepository.findById(id).orElseThrow(() -> new IllegalArgumentException(\"La categoría no existe.\"));\n        if (skillRepository.existsByCategoria(categoria)) {\n            throw new IllegalArgumentException(\"La categoría está asignada a una o más habilidades.\");\n        }\n        categoriaRepository.delete(categoria);\n    }\n}\n```\n\n```java\npackage com.skillmap.backend.controller;\n\nimport com.skillmap.backend.model.Categoria;\nimport com.skillmap.backend.service.CategoriaService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/categorias\")\npublic class CategoriaController {\n\n    @Autowired\n    private CategoriaService categoriaService;\n\n    @PostMapping\n    public ResponseEntity<Categoria> crearCategoria(@RequestBody Categoria categoria) {\n        return new ResponseEntity<>(categoriaService.crearCategoria(categoria), HttpStatus.CREATED);\n    }\n\n    @GetMapping\n    public ResponseEntity<List<Categoria>> listarCategorias() {\n        return new ResponseEntity<>(categoriaService.listarCategorias(), HttpStatus.OK);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<Categoria> actualizarCategoria(@PathVariable Long id, @RequestBody Categoria categoria) {\n        return new ResponseEntity<>(categoriaService.actualizarCategoria(id, categoria), HttpStatus.OK);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> eliminarCategoria(@PathVariable Long id) {\n        categoriaService.eliminarCategoria(id);\n        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n    }\n}\n```",
        "refusal": null,
        "annotations": []
      },
      "logprobs": null,
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 1737,
    "completion_tokens": 923,
    "total_tokens": 2660,
    "prompt_tokens_details": {
      "cached_tokens": 0,
      "audio_tokens": 0
    },
    "completion_tokens_details": {
      "reasoning_tokens": 0,
      "audio_tokens": 0,
      "accepted_prediction_tokens": 0,
      "rejected_prediction_tokens": 0
    }
  },
  "service_tier": "default",
  "system_fingerprint": null
}
