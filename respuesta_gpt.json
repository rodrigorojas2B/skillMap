{
  "id": "chatcmpl-BqmZvQSNgWvkYpzLNMPz77MuHrDeo",
  "object": "chat.completion",
  "created": 1751919491,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "```java\npackage com.skillmap.backend.model;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.validation.constraints.NotNull;\n\n@Entity\npublic class Skill {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    @NotNull\n    private String nombre;\n\n    @ManyToOne\n    @NotNull\n    private Categoria categoria;\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getNombre() {\n        return nombre;\n    }\n\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n\n    public Categoria getCategoria() {\n        return categoria;\n    }\n\n    public void setCategoria(Categoria categoria) {\n        this.categoria = categoria;\n    }\n}\n```\n\n```java\npackage com.skillmap.backend.repository;\n\nimport com.skillmap.backend.model.Skill;\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface SkillRepository extends CrudRepository<Skill, Long> {\n}\n```\n\n```java\npackage com.skillmap.backend.service;\n\nimport com.skillmap.backend.model.Skill;\nimport com.skillmap.backend.repository.SkillRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class SkillService {\n\n    private final SkillRepository skillRepository;\n\n    @Autowired\n    public SkillService(SkillRepository skillRepository) {\n        this.skillRepository = skillRepository;\n    }\n\n    public Skill save(Skill skill) {\n        return skillRepository.save(skill);\n    }\n\n    public Iterable<Skill> getAll() {\n        return skillRepository.findAll();\n    }\n\n    public Skill getById(Long id) {\n        return skillRepository.findById(id).orElse(null);\n    }\n\n    public void delete(Long id) {\n        skillRepository.deleteById(id);\n    }\n}\n```\n\n```java\npackage com.skillmap.backend.controller;\n\nimport com.skillmap.backend.model.Skill;\nimport com.skillmap.backend.service.SkillService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/skills\")\npublic class SkillController {\n\n    private final SkillService skillService;\n\n    @Autowired\n    public SkillController(SkillService skillService) {\n        this.skillService = skillService;\n    }\n\n    @PostMapping\n    public Skill createSkill(@RequestBody Skill skill) {\n        return skillService.save(skill);\n    }\n\n    @GetMapping\n    public Iterable<Skill> getAllSkills() {\n        return skillService.getAll();\n    }\n\n    @GetMapping(\"/{id}\")\n    public Skill getSkillById(@PathVariable Long id) {\n        return skillService.getById(id);\n    }\n\n    @PutMapping(\"/{id}\")\n    public Skill updateSkill(@PathVariable Long id, @RequestBody Skill skill) {\n        Skill existingSkill = skillService.getById(id);\n        if (existingSkill != null) {\n            existingSkill.setNombre(skill.getNombre());\n            existingSkill.setCategoria(skill.getCategoria());\n            return skillService.save(existingSkill);\n        }\n        return null;\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public void deleteSkill(@PathVariable Long id) {\n        skillService.delete(id);\n    }\n}\n```",
        "refusal": null,
        "annotations": []
      },
      "logprobs": null,
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 1277,
    "completion_tokens": 652,
    "total_tokens": 1929,
    "prompt_tokens_details": {
      "cached_tokens": 0,
      "audio_tokens": 0
    },
    "completion_tokens_details": {
      "reasoning_tokens": 0,
      "audio_tokens": 0,
      "accepted_prediction_tokens": 0,
      "rejected_prediction_tokens": 0
    }
  },
  "service_tier": "default",
  "system_fingerprint": null
}
