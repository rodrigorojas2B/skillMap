{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un analista de clases Java que trabaja exclusivamente con los archivos entregados a continuación. No supongas la existencia de clases que no se proporcionan. Si una clase no aparece explícitamente, debe asumirse como no existente. No devuelvas código aún, solo análisis y tabla."
    },
    {
      "role": "user",
      "content": "\n\n--- HISTORIA DE USUARIO ---\n- id: HDU006\n  title: Registrar y mantener colaboradores\n  descripcion: Como administrador, quiero registrar los colaboradores activos en la\n    organización para luego evaluar sus skills.\n  entidad: Colaborador\n  campos:\n  - id\n  - nombre\n  - paterno\n  - materno\n  - id_calibrador_actual\n  validaciones:\n  - id único\n  - relación opcional a otro colaborador como calibrador\n\n--- CLASES DISPONIBLES EN EL PROYECTO ---\nContenido\nSkill\nEspecialidad\nRol\nSkillMap\nCategoria\nSkillController\nCategoriaController\nContenidoController\nRolController\nSkillMapController\nSkillMapRepository\nContenidoRepository\nSkillRepository\nRolRepository\nCategoriaRepository\nContenidoService\nSkillService\nSkillMapService\nRolService\nCategoriaService\nBackendApplication\n\n\n--- CÓDIGO EXISTENTE DEL PROYECTO ---\n\n\n// Archivo: src/main/java/com/skillmap/backend/model/Contenido.java\n\npackage com.skillmap.backend.model;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Column;\nimport jakarta.validation.constraints.Max;\nimport jakarta.validation.constraints.Min;\nimport jakarta.validation.constraints.NotNull;\n@Entity\npublic class Contenido {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    @NotNull\n    @Min(1)\n    @Max(5)\n    private Integer nivel;\n    @NotNull\n    @Column(length = 500)\n    private String url_curso;\n    @NotNull\n    @Column(length = 500)\n    private String url_test;\n    @NotNull\n    private Long skill_id;\n    // getters and setters\n    public Long getId() {\n        return id;\n    }\n    public void setId(Long id) {\n        this.id = id;\n    }\n    public Integer getNivel() {\n        return nivel;\n    }\n    public void setNivel(Integer nivel) {\n        this.nivel = nivel;\n    }\n    public String getUrl_curso() {\n        return url_curso;\n    }\n    public void setUrl_curso(String url_curso) {\n        this.url_curso = url_curso;\n    }\n    public String getUrl_test() {\n        return url_test;\n    }\n    public void setUrl_test(String url_test) {\n        this.url_test = url_test;\n    }\n    public Long getSkill_id() {\n        return skill_id;\n    }\n    public void setSkill_id(Long skill_id) {\n        this.skill_id = skill_id;\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/model/Skill.java\n\npackage com.skillmap.backend.model;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.validation.constraints.NotNull;\n@Entity\npublic class Skill {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n    @NotNull\n    private String nombre;\n    @ManyToOne\n    @NotNull\n    private Categoria categoria;\n    public Long getId() {\n        return id;\n    }\n    public void setId(Long id) {\n        this.id = id;\n    }\n    public String getNombre() {\n        return nombre;\n    }\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n    public Categoria getCategoria() {\n        return categoria;\n    }\n    public void setCategoria(Categoria categoria) {\n        this.categoria = categoria;\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/model/Especialidad.java\n\npackage com.skillmap.backend.model;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.validation.constraints.NotBlank;\n@Entity\npublic class Especialidad {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    @NotBlank\n    private String nombre;\n    public Long getId() {\n        return id;\n    }\n    public void setId(Long id) {\n        this.id = id;\n    }\n    public String getNombre() {\n        return nombre;\n    }\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/model/Rol.java\n\npackage com.skillmap.backend.model;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\n@Entity\npublic class Rol {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    @NotBlank\n    @Column(unique = true)\n    private String nombre;\n    @NotBlank\n    private String descripcion;\n    @NotNull\n    @ManyToOne\n    @JoinColumn(name = \"especialidad_id\", nullable = false)\n    private Especialidad especialidad;\n    @NotNull\n    @Enumerated(EnumType.STRING)\n    private Grado grado;\n    public enum Grado {\n        TRAINEE, JUNIOR, PLENO, SEMI_SENIOR, SENIOR, EXPERTO\n    }\n    public Long getId() {\n        return id;\n    }\n    public void setId(Long id) {\n        this.id = id;\n    }\n    public String getNombre() {\n        return nombre;\n    }\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n    public String getDescripcion() {\n        return descripcion;\n    }\n    public void setDescripcion(String descripcion) {\n        this.descripcion = descripcion;\n    }\n    public Especialidad getEspecialidad() {\n        return especialidad;\n    }\n    public void setEspecialidad(Especialidad especialidad) {\n        this.especialidad = especialidad;\n    }\n    public Grado getGrado() {\n        return grado;\n    }\n    public void setGrado(Grado grado) {\n        this.grado = grado;\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/model/SkillMap.java\n\npackage com.skillmap.backend.model;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Table;\nimport jakarta.validation.constraints.Max;\nimport jakarta.validation.constraints.Min;\nimport jakarta.validation.constraints.NotNull;\n@Entity\n@Table(name = \"skill_map\")\npublic class SkillMap {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    @NotNull\n    @Column(name = \"rol_id\")\n    private Long rolId;\n    @NotNull\n    @Column(name = \"grado\")\n    private String grado;\n    @NotNull\n    @Column(name = \"skill_id\")\n    private Long skillId;\n    @NotNull\n    @Min(1)\n    @Max(5)\n    @Column(name = \"nivel_base\")\n    private Integer nivelBase;\n    // getters and setters\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/model/Categoria.java\n\npackage com.skillmap.backend.model;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.validation.constraints.NotBlank;\n@Entity\npublic class Categoria {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    @NotBlank\n    private String nombre;\n    public Long getId() {\n        return id;\n    }\n    public void setId(Long id) {\n        this.id = id;\n    }\n    public String getNombre() {\n        return nombre;\n    }\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/controller/SkillController.java\n\npackage com.skillmap.backend.controller;\nimport com.skillmap.backend.model.Contenido;\nimport com.skillmap.backend.service.ContenidoService;\nimport com.skillmap.backend.service.SkillService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n@RestController\n@RequestMapping(\"/api/skill\")\npublic class SkillController {\n    @Autowired\n    private SkillService skillService;\n    @Autowired\n    private ContenidoService contenidoService;\n    // existing methods\n    @PostMapping(\"/{id}/contenido\")\n    public Contenido createContenido(@PathVariable Long id, @RequestBody Contenido contenido) {\n        contenido.setSkill_id(id);\n        return contenidoService.save(contenido);\n    }\n    @GetMapping(\"/{id}/contenido/{contenidoId}\")\n    public Contenido getContenido(@PathVariable Long id, @PathVariable Long contenidoId) {\n        Contenido contenido = contenidoService.get(contenidoId);\n        if (contenido != null && contenido.getSkill_id().equals(id)) {\n            return contenido;\n        }\n        return null;\n    }\n    @PutMapping(\"/{id}/contenido\")\n    public Contenido updateContenido(@PathVariable Long id, @RequestBody Contenido contenido) {\n        if (contenido.getSkill_id().equals(id)) {\n            return contenidoService.update(contenido);\n        }\n        return null;\n    }\n    @DeleteMapping(\"/{id}/contenido/{contenidoId}\")\n    public void deleteContenido(@PathVariable Long id, @PathVariable Long contenidoId) {\n        Contenido contenido = contenidoService.get(contenidoId);\n        if (contenido != null && contenido.getSkill_id().equals(id)) {\n            contenidoService.delete(contenidoId);\n        }\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/controller/CategoriaController.java\n\npackage com.skillmap.backend.controller;\nimport com.skillmap.backend.model.Categoria;\nimport com.skillmap.backend.service.CategoriaService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n@RestController\n@RequestMapping(\"/categorias\")\npublic class CategoriaController {\n    @Autowired\n    private CategoriaService categoriaService;\n    @PostMapping\n    public Categoria createCategoria(@RequestBody Categoria categoria) {\n        return categoriaService.createCategoria(categoria);\n    }\n    @GetMapping\n    public Iterable<Categoria> getAllCategorias() {\n        return categoriaService.getAllCategorias();\n    }\n    @PutMapping(\"/{id}\")\n    public Categoria updateCategoria(@PathVariable Long id, @RequestBody Categoria categoria) {\n        return categoriaService.updateCategoria(id, categoria);\n    }\n    @DeleteMapping(\"/{id}\")\n    public void deleteCategoria(@PathVariable Long id) {\n        categoriaService.deleteCategoria(id);\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/controller/ContenidoController.java\n\npackage com.skillmap.backend.controller;\nimport com.skillmap.backend.model.Contenido;\nimport com.skillmap.backend.service.ContenidoService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n@RestController\n@RequestMapping(\"/api/contenido\")\npublic class ContenidoController {\n    @Autowired\n    private ContenidoService contenidoService;\n    @PostMapping\n    public Contenido create(@RequestBody Contenido contenido) {\n        return contenidoService.save(contenido);\n    }\n    @GetMapping(\"/{id}\")\n    public Contenido get(@PathVariable Long id) {\n        return contenidoService.get(id);\n    }\n    @PutMapping\n    public Contenido update(@RequestBody Contenido contenido) {\n        return contenidoService.update(contenido);\n    }\n    @DeleteMapping(\"/{id}\")\n    public void delete(@PathVariable Long id) {\n        contenidoService.delete(id);\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/controller/RolController.java\n\npackage com.skillmap.backend.controller;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport com.skillmap.backend.model.Rol;\nimport com.skillmap.backend.service.RolService;\n@RestController\n@RequestMapping(\"/api/roles\")\npublic class RolController {\n    private final RolService rolService;\n    @Autowired\n    public RolController(RolService rolService) {\n        this.rolService = rolService;\n    }\n    @PostMapping\n    public ResponseEntity<Rol> createRol(@RequestBody Rol rol) {\n        Rol savedRol = rolService.saveRol(rol);\n        return new ResponseEntity<>(savedRol, HttpStatus.CREATED);\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/controller/SkillMapController.java\n\npackage com.skillmap.backend.controller;\nimport com.skillmap.backend.model.SkillMap;\nimport com.skillmap.backend.service.SkillMapService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n@RestController\n@RequestMapping(\"/api/skillmap\")\npublic class SkillMapController {\n    private final SkillMapService skillMapService;\n    @Autowired\n    public SkillMapController(SkillMapService skillMapService) {\n        this.skillMapService = skillMapService;\n    }\n    @PostMapping\n    public ResponseEntity<SkillMap> createSkillMap(@RequestBody SkillMap skillMap) {\n        return ResponseEntity.ok(skillMapService.saveSkillMap(skillMap));\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/repository/SkillMapRepository.java\n\npackage com.skillmap.backend.repository;\nimport com.skillmap.backend.model.SkillMap;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n@Repository\npublic interface SkillMapRepository extends JpaRepository<SkillMap, Long> {\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/repository/ContenidoRepository.java\n\npackage com.skillmap.backend.repository;\nimport com.skillmap.backend.model.Contenido;\nimport org.springframework.data.jpa.repository.JpaRepository;\npublic interface ContenidoRepository extends JpaRepository<Contenido, Long> {\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/repository/SkillRepository.java\n\npackage com.skillmap.backend.repository;\nimport com.skillmap.backend.model.Skill;\nimport org.springframework.data.repository.CrudRepository;\npublic interface SkillRepository extends CrudRepository<Skill, Long> {\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/repository/RolRepository.java\n\npackage com.skillmap.backend.repository;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport com.skillmap.backend.model.Rol;\npublic interface RolRepository extends JpaRepository<Rol, Long> {\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/repository/CategoriaRepository.java\n\npackage com.skillmap.backend.repository;\nimport com.skillmap.backend.model.Categoria;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n@Repository\npublic interface CategoriaRepository extends JpaRepository<Categoria, Long> {\n    boolean existsByNombre(String nombre);\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/service/ContenidoService.java\n\npackage com.skillmap.backend.service;\nimport com.skillmap.backend.model.Contenido;\nimport com.skillmap.backend.repository.ContenidoRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n@Service\npublic class ContenidoService {\n    @Autowired\n    private ContenidoRepository contenidoRepository;\n    public Contenido save(Contenido contenido) {\n        return contenidoRepository.save(contenido);\n    }\n    public Contenido get(Long id) {\n        return contenidoRepository.findById(id).orElse(null);\n    }\n    public Contenido update(Contenido contenido) {\n        return contenidoRepository.save(contenido);\n    }\n    public void delete(Long id) {\n        contenidoRepository.deleteById(id);\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/service/SkillService.java\n\npackage com.skillmap.backend.service;\nimport com.skillmap.backend.model.Contenido;\nimport com.skillmap.backend.repository.ContenidoRepository;\nimport com.skillmap.backend.repository.SkillRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n@Service\npublic class SkillService {\n    @Autowired\n    private SkillRepository skillRepository;\n    @Autowired\n    private ContenidoRepository contenidoRepository;\n    // existing methods\n    public Contenido saveContenido(Contenido contenido) {\n        return contenidoRepository.save(contenido);\n    }\n    public Contenido getContenido(Long id) {\n        return contenidoRepository.findById(id).orElse(null);\n    }\n    public Contenido updateContenido(Contenido contenido) {\n        return contenidoRepository.save(contenido);\n    }\n    public void deleteContenido(Long id) {\n        contenidoRepository.deleteById(id);\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/service/SkillMapService.java\n\npackage com.skillmap.backend.service;\nimport com.skillmap.backend.model.SkillMap;\nimport com.skillmap.backend.repository.SkillMapRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n@Service\npublic class SkillMapService {\n    private final SkillMapRepository skillMapRepository;\n    @Autowired\n    public SkillMapService(SkillMapRepository skillMapRepository) {\n        this.skillMapRepository = skillMapRepository;\n    }\n    public SkillMap saveSkillMap(SkillMap skillMap) {\n        return skillMapRepository.save(skillMap);\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/service/RolService.java\n\npackage com.skillmap.backend.service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport com.skillmap.backend.model.Rol;\nimport com.skillmap.backend.repository.RolRepository;\n@Service\npublic class RolService {\n    private final RolRepository rolRepository;\n    @Autowired\n    public RolService(RolRepository rolRepository) {\n        this.rolRepository = rolRepository;\n    }\n    public Rol saveRol(Rol rol) {\n        return rolRepository.save(rol);\n    }\n    public Iterable<Rol> getAllRoles() {\n        return rolRepository.findAll();\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/service/CategoriaService.java\n\npackage com.skillmap.backend.service;\nimport com.skillmap.backend.model.Categoria;\nimport com.skillmap.backend.repository.CategoriaRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n@Service\npublic class CategoriaService {\n    @Autowired\n    private CategoriaRepository categoriaRepository;\n    public Categoria createCategoria(Categoria categoria) {\n        if (categoriaRepository.existsByNombre(categoria.getNombre())) {\n            throw new IllegalArgumentException(\"El nombre de la categoría ya existe\");\n        }\n        return categoriaRepository.save(categoria);\n    }\n    public Iterable<Categoria> getAllCategorias() {\n        return categoriaRepository.findAll();\n    }\n    public Categoria updateCategoria(Long id, Categoria categoria) {\n        if (!categoriaRepository.existsById(id)) {\n            throw new IllegalArgumentException(\"La categoría no existe\");\n        }\n        if (categoriaRepository.existsByNombre(categoria.getNombre())) {\n            throw new IllegalArgumentException(\"El nombre de la categoría ya existe\");\n        }\n        categoria.setId(id);\n        return categoriaRepository.save(categoria);\n    }\n    public void deleteCategoria(Long id) {\n        if (!categoriaRepository.existsById(id)) {\n            throw new IllegalArgumentException(\"La categoría no existe\");\n        }\n        categoriaRepository.deleteById(id);\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/BackendApplication.java\n\npackage com.skillmap.backend;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class BackendApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(BackendApplication.class, args);\n\t}\n\n}\n\n--- ANÁLISIS DE CLASES EXISTENTES ---\nGenera una tabla Markdown como esta:\n\n| Clase Java | Package | Clasificación | Motivo |\n|------------|---------|----------------|--------|\n| Employee | com.example.EmployeeCoreApi.model | REUTILIZABLE-AS-IS | Contiene atributo `gender` |\n| EmployeeServiceImpl | com.example.EmployeeCoreApi.service.impl | MODIFICABLE | Debe validar antes de borrar |\n| CannotDeleteEmployeeException | com.example.EmployeeCoreApi.exception | NUEVA | Requerida para lanzar excepción |\n| EmployeeServiceImplTest | com.example.EmployeeCoreApi.service.impl | NUEVA | Pruebas unitarias de validación |\n\n--- INSTRUCCIONES DE MODIFICACIÓN ---\n- No eliminar ni reemplazar lógica existente.\n- Si se modifica un método, incluirlo completo con el nuevo código y lo que ya tenía.\n- Solo generar clases nuevas si están indicadas como NUEVA.\n- Cada clase debe estar en su package correcto, según lo indicado en la tabla.\n- NO repetir clases ya existentes si no cambian.\n- NO eliminar los métodos existentes a menos que sea necesario\n- NO reemplazar métodos u otro contenido de las clases existentes por comentarios entre líneas\n- Solo considerar como existente una clase si está listada explícitamente en \"CLASES DISPONIBLES EN EL PROYECTO\".\n- No debes asumir la existencia de clases que no aparecen explícitamente en la sección anterior. Si alguna clase no está listada entre las clases disponibles ni aparece en el código entregado, debe considerarse INEXISTENTE y marcada como NUEVA en el análisis.\n- Si una clase no aparece listada, asumir que es NUEVA.\n- Si una clase herada de otra clase o importa una interfaz propia del proyecto asegúrate que esta esté entre las clases existentes o genera el código respectivo de no existir previamente\n\n--- CÓDIGO A GENERAR ---\nDevuelve solo clases Java válidas. Cada bloque debe comenzar con `package ...`.\nIncluye los tests JUnit5 en el mismo formato si aplica.\n"
    }
  ],
  "temperature": 0.2
}
