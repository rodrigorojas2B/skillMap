{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un analista de clases Java que trabaja exclusivamente con los archivos entregados a continuación. No supongas la existencia de clases que no se proporcionan. Si una clase no aparece explícitamente, debe asumirse como no existente. No devuelvas código aún, solo análisis y tabla."
    },
    {
      "role": "user",
      "content": "\n\n--- HISTORIA DE USUARIO ---\n- id: HDU002\n  title: Crear y gestionar skills asociados a categorías\n  descripcion: Como administrador, quiero poder definir skills técnicos (como Java,\n    Jenkins, Docker) agrupados en categorías, para luego asignarlos a roles.\n  entidad: Skill\n  campos:\n  - id\n  - nombre\n  - categoria_id\n  acciones:\n  - POST\n  - GET\n  - PUT\n  - DELETE\n  validaciones:\n  - nombre obligatorio\n  - referencia válida a categoria\n\n--- CLASES DISPONIBLES EN EL PROYECTO ---\nCategoria\nCategoriaController\nCategoriaRepository\nCategoriaService\nBackendApplication\n\n\n--- CÓDIGO EXISTENTE DEL PROYECTO ---\n\n\n// Archivo: src/main/java/com/skillmap/backend/model/Categoria.java\n\npackage com.skillmap.backend.model;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.validation.constraints.NotBlank;\n@Entity\npublic class Categoria {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    @NotBlank\n    private String nombre;\n    public Long getId() {\n        return id;\n    }\n    public void setId(Long id) {\n        this.id = id;\n    }\n    public String getNombre() {\n        return nombre;\n    }\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/controller/CategoriaController.java\n\npackage com.skillmap.backend.controller;\nimport com.skillmap.backend.model.Categoria;\nimport com.skillmap.backend.service.CategoriaService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n@RestController\n@RequestMapping(\"/categorias\")\npublic class CategoriaController {\n    @Autowired\n    private CategoriaService categoriaService;\n    @PostMapping\n    public Categoria createCategoria(@RequestBody Categoria categoria) {\n        return categoriaService.createCategoria(categoria);\n    }\n    @GetMapping\n    public Iterable<Categoria> getAllCategorias() {\n        return categoriaService.getAllCategorias();\n    }\n    @PutMapping(\"/{id}\")\n    public Categoria updateCategoria(@PathVariable Long id, @RequestBody Categoria categoria) {\n        return categoriaService.updateCategoria(id, categoria);\n    }\n    @DeleteMapping(\"/{id}\")\n    public void deleteCategoria(@PathVariable Long id) {\n        categoriaService.deleteCategoria(id);\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/repository/CategoriaRepository.java\n\npackage com.skillmap.backend.repository;\nimport com.skillmap.backend.model.Categoria;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n@Repository\npublic interface CategoriaRepository extends JpaRepository<Categoria, Long> {\n    boolean existsByNombre(String nombre);\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/service/CategoriaService.java\n\npackage com.skillmap.backend.service;\nimport com.skillmap.backend.model.Categoria;\nimport com.skillmap.backend.repository.CategoriaRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n@Service\npublic class CategoriaService {\n    @Autowired\n    private CategoriaRepository categoriaRepository;\n    public Categoria createCategoria(Categoria categoria) {\n        if (categoriaRepository.existsByNombre(categoria.getNombre())) {\n            throw new IllegalArgumentException(\"El nombre de la categoría ya existe\");\n        }\n        return categoriaRepository.save(categoria);\n    }\n    public Iterable<Categoria> getAllCategorias() {\n        return categoriaRepository.findAll();\n    }\n    public Categoria updateCategoria(Long id, Categoria categoria) {\n        if (!categoriaRepository.existsById(id)) {\n            throw new IllegalArgumentException(\"La categoría no existe\");\n        }\n        if (categoriaRepository.existsByNombre(categoria.getNombre())) {\n            throw new IllegalArgumentException(\"El nombre de la categoría ya existe\");\n        }\n        categoria.setId(id);\n        return categoriaRepository.save(categoria);\n    }\n    public void deleteCategoria(Long id) {\n        if (!categoriaRepository.existsById(id)) {\n            throw new IllegalArgumentException(\"La categoría no existe\");\n        }\n        categoriaRepository.deleteById(id);\n    }\n}\n\n\n// Archivo: src/main/java/com/skillmap/backend/BackendApplication.java\n\npackage com.skillmap.backend;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class BackendApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(BackendApplication.class, args);\n\t}\n\n}\n\n--- ANÁLISIS DE CLASES EXISTENTES ---\nGenera una tabla Markdown como esta:\n\n| Clase Java | Package | Clasificación | Motivo |\n|------------|---------|----------------|--------|\n| Employee | com.example.EmployeeCoreApi.model | REUTILIZABLE-AS-IS | Contiene atributo `gender` |\n| EmployeeServiceImpl | com.example.EmployeeCoreApi.service.impl | MODIFICABLE | Debe validar antes de borrar |\n| CannotDeleteEmployeeException | com.example.EmployeeCoreApi.exception | NUEVA | Requerida para lanzar excepción |\n| EmployeeServiceImplTest | com.example.EmployeeCoreApi.service.impl | NUEVA | Pruebas unitarias de validación |\n\n--- INSTRUCCIONES DE MODIFICACIÓN ---\n- No eliminar ni reemplazar lógica existente.\n- Si se modifica un método, incluirlo completo con el nuevo código y lo que ya tenía.\n- Solo generar clases nuevas si están indicadas como NUEVA.\n- Cada clase debe estar en su package correcto, según lo indicado en la tabla.\n- NO repetir clases ya existentes si no cambian.\n- NO eliminar los métodos existentes a menos que sea necesario\n- NO reemplazar métodos u otro contenido de las clases existentes por comentarios entre líneas\n- Solo considerar como existente una clase si está listada explícitamente en \"CLASES DISPONIBLES EN EL PROYECTO\".\n- No debes asumir la existencia de clases que no aparecen explícitamente en la sección anterior. Si alguna clase no está listada entre las clases disponibles ni aparece en el código entregado, debe considerarse INEXISTENTE y marcada como NUEVA en el análisis.\n- Si una clase no aparece listada, asumir que es NUEVA.\n- Si una clase herada de otra clase o importa una interfaz propia del proyecto asegúrate que esta esté entre las clases existentes o genera el código respectivo de no existir previamente\n\n--- CÓDIGO A GENERAR ---\nDevuelve solo clases Java válidas. Cada bloque debe comenzar con `package ...`.\nIncluye los tests JUnit5 en el mismo formato si aplica.\n"
    }
  ],
  "temperature": 0.2
}
