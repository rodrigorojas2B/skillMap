{
    "model": "gpt-4",
    "messages": [
      {
        "role": "system",
        "content": "Eres un generador de código Java experto en Spring Boot. Tu salida debe contener únicamente código fuente Java completamente válido. Cada clase debe comenzar con 'package ...' y contener la declaración completa de la clase (public class, interface o enum). No debes escribir ningún texto explicativo, encabezado, numeración, ni comentarios como '1.', '2.', 'Test Unitario:', etc. Si la clase ya existe en el repositorio, debes conservar su package original y todos sus métodos, incluso si no se modifican. No puedes inventar nuevos packages como 'com.example.demo'. Si una clase es nueva, debe estar marcada como NUEVA en el análisis previo. No escribas ningún contenido fuera de los bloques de código. El resultado debe ser compilable sin errores ni contenido basura."
      },
      {
        "role": "user",
        "content": "--- HISTORIA DE USUARIO ---\n- id: HDU001\n  title: Crear y gestionar categorías de skills\n  descripcion: 'Como administrador, quiero poder crear, listar, actualizar y eliminar\n    categorías de skills (por ejemplo: Lenguajes, DevOps, Bases de Datos) para organizar\n    los skills disponibles.'\n  entidad: Categoria\n  campos:\n  - id\n  - nombre\n  acciones:\n  - POST\n  - GET\n  - PUT\n  - DELETE\n  validaciones:\n  - nombre obligatorio\n  - nombre único\n- id: HDU002\n  title: Crear y gestionar skills asociados a categorías\n  descripcion: Como administrador, quiero poder definir skills técnicos (como Java,\n    Jenkins, Docker) agrupados en categorías, para luego asignarlos a roles.\n  entidad: Skill\n  campos:\n  - id\n  - nombre\n  - categoria_id\n  acciones:\n  - POST\n  - GET\n  - PUT\n  - DELETE\n  validaciones:\n  - nombre obligatorio\n  - referencia válida a categoria\n- id: HDU003\n  title: Asociar contenido de aprendizaje a skills\n  descripcion: Como administrador, quiero poder asociar cursos y pruebas a un skill,\n    indicando el nivel objetivo (de 1 a 5), para ayudar en la nivelación de colaboradores.\n  entidad: Contenido\n  campos:\n  - nivel\n  - url_curso\n  - url_test\n  - skill_id\n  acciones:\n  - POST\n  - GET\n  - PUT\n  - DELETE\n  validaciones:\n  - nivel entre 1 y 5\n- id: HDU004\n  title: Crear y mantener roles técnicos\n  descripcion: Como administrador, quiero poder definir roles como “Desarrollador\n    Backend” o “DevOps Engineer” junto con su especialidad y grado, para asociarlos\n    luego a skills y colaboradores.\n  entidad: Rol\n  campos:\n  - nombre\n  - descripcion\n  - especialidad_id\n  - grado\n  valores_validos:\n    grado:\n    - Trainee\n    - Junior\n    - Pleno\n    - Semi-Senior\n    - Senior\n    - Experto\n  relaciones:\n  - especialidad (FK)\n- id: HDU005\n  title: Definir el nivel esperado de cada skill por rol y grado\n  descripcion: Como administrador, quiero poder definir para cada rol y grado el nivel\n    técnico mínimo requerido por skill (de 1 a 5) para facilitar la evaluación de\n    desempeño.\n  entidad: SkillMap\n  campos:\n  - rol_id\n  - grado\n  - skill_id\n  - nivel_base\n  validaciones:\n  - nivel_base entre 1 y 5\n  - combinación única (rol_id, grado, skill_id)\n- id: HDU006\n  title: Registrar y mantener colaboradores\n  descripcion: Como administrador, quiero registrar los colaboradores activos en la\n    organización para luego evaluar sus skills.\n  entidad: Colaborador\n  campos:\n  - id\n  - nombre\n  - paterno\n  - materno\n  - id_calibrador_actual\n  validaciones:\n  - id único\n  - relación opcional a otro colaborador como calibrador\n- id: HDU007\n  title: Registrar sesiones de evaluación de skills\n  descripcion: Como colaborador, quiero registrar mi autoevaluación y que luego un\n    calibrador pueda ajustarla,  para tener una evaluación técnica objetiva.\n  entidad: SkillFit\n  campos:\n  - id_colaborador\n  - id_calibrador\n  - fecha_autoeval\n  - fecha_calibracion\n  - descripcion\n- id: HDU008\n  title: Registrar evaluación individual por skill\n  descripcion: Como colaborador, quiero guardar mi nivel autoevaluado por skill, y\n    permitir que un calibrador ajuste ese nivel, suba evidencia y asocie el resultado\n    de un test.\n  entidad: SkillEval\n  campos:\n  - nivel_autoeval\n  - nivel_calibrado\n  - observaciones\n  - nota_test\n  - url_evidencia\n  - id_skill_fit\n  - id_skill\n- id: HDU009\n  title: Detectar brechas de skills por colaborador\n  descripcion: Como colaborador o evaluador, quiero conocer los skills que están por\n    debajo del nivel esperado para el rol y grado del colaborador, para orientar acciones\n    de mejora.\n  fuente_datos: Comparación entre nivel_calibrado en SkillEval y nivel_base en SkillMap\n    (filtrado por rol y grado del colaborador)\n- id: HDU010\n  title: Obtener recomendaciones de cursos por skill y brecha\n  descripcion: Como colaborador, quiero recibir sugerencias de cursos alineados a\n    mis brechas de nivel, para nivelarme en los skills necesarios.\n  fuente_datos: Filtrar Contenido por skill_id y nivel igual a nivel_base (esperado)\n    en SkillMap\n- id: HDU011\n  title: Ver historial de evaluaciones\n  descripcion: Como colaborador o evaluador, quiero ver todas las sesiones de evaluación\n    pasadas de un colaborador para revisar su evolución.\n  fuente_datos: SkillFit por id_colaborador con join a SkillEval\n- id: HDU012\n  title: Marcar vigencia del colaborador\n  descripcion: Como administrador, quiero saber si un colaborador está activo en la\n    organización y desde cuándo, para excluir inactivos de evaluaciones futuras.\n  entidad: Colaborador\n  campos:\n  - vigente\n  - fecha_ingreso\n  - fecha_salida\n\n\n--- DIAGNÓSTICO Y PLAN DE CLASES ---\n--- ANÁLISIS DE CLASES EXISTENTES ---\n\n| Clase Java | Package | Clasificación | Motivo |\n|------------|---------|----------------|--------|\n| BackendApplication | com.skillmap.backend | REUTILIZABLE-AS-IS | Clase principal de la aplicación Spring Boot |\n\n--- CLASES A GENERAR ---\n\n| Clase Java | Package | Clasificación | Motivo |\n|------------|---------|----------------|--------|\n| Categoria | com.skillmap.backend.model | NUEVA | Entidad requerida por la historia de usuario HDU001 |\n| Skill | com.skillmap.backend.model | NUEVA | Entidad requerida por la historia de usuario HDU002 |\n| Contenido | com.skillmap.backend.model | NUEVA | Entidad requerida por la historia de usuario HDU003 |\n| Rol | com.skillmap.backend.model | NUEVA | Entidad requerida por la historia de usuario HDU004 |\n| SkillMap | com.skillmap.backend.model | NUEVA | Entidad requerida por la historia de usuario HDU005 |\n| Colaborador | com.skillmap.backend.model | NUEVA | Entidad requerida por la historia de usuario HDU006 |\n| SkillFit | com.skillmap.backend.model | NUEVA | Entidad requerida por la historia de usuario HDU007 |\n| SkillEval | com.skillmap.backend.model | NUEVA | Entidad requerida por la historia de usuario HDU008 |\n| CategoriaService | com.skillmap.backend.service | NUEVA | Servicio para manejar operaciones de la entidad Categoria |\n| SkillService | com.skillmap.backend.service | NUEVA | Servicio para manejar operaciones de la entidad Skill |\n| ContenidoService | com.skillmap.backend.service | NUEVA | Servicio para manejar operaciones de la entidad Contenido |\n| RolService | com.skillmap.backend.service | NUEVA | Servicio para manejar operaciones de la entidad Rol |\n| SkillMapService | com.skillmap.backend.service | NUEVA | Servicio para manejar operaciones de la entidad SkillMap |\n| ColaboradorService | com.skillmap.backend.service | NUEVA | Servicio para manejar operaciones de la entidad Colaborador |\n| SkillFitService | com.skillmap.backend.service | NUEVA | Servicio para manejar operaciones de la entidad SkillFit |\n| SkillEvalService | com.skillmap.backend.service | NUEVA | Servicio para manejar operaciones de la entidad SkillEval |\n| CategoriaController | com.skillmap.backend.controller | NUEVA | Controlador para manejar peticiones HTTP de la entidad Categoria |\n| SkillController | com.skillmap.backend.controller | NUEVA | Controlador para manejar peticiones HTTP de la entidad Skill |\n| ContenidoController | com.skillmap.backend.controller | NUEVA | Controlador para manejar peticiones HTTP de la entidad Contenido |\n| RolController | com.skillmap.backend.controller | NUEVA | Controlador para manejar peticiones HTTP de la entidad Rol |\n| SkillMapController | com.skillmap.backend.controller | NUEVA | Controlador para manejar peticiones HTTP de la entidad SkillMap |\n| ColaboradorController | com.skillmap.backend.controller | NUEVA | Controlador para manejar peticiones HTTP de la entidad Colaborador |\n| SkillFitController | com.skillmap.backend.controller | NUEVA | Controlador para manejar peticiones HTTP de la entidad SkillFit |\n| SkillEvalController | com.skillmap.backend.controller | NUEVA | Controlador para manejar peticiones HTTP de la entidad SkillEval |\n\n--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---\n- Modifica únicamente las clases marcadas como MODIFICABLE.\n- Crea nuevas clases solo si están indicadas como NUEVA.\n- No cambies de paquete ni nombre de clase.\n- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.\n- No omitas lógica existente.\n- Cada clase debe comenzar con `package ...`.\n- Devuelve únicamente clases y tests JUnit 5 válidos.\n- No incluyas explicaciones ni comentarios adicionales.\n- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.\n- No elimines implementaciones de interfaces ya declaradas.\n- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera\n- Si se crea una llamada a un método de la clase modificada asegúrate que ese método exista en la clase\n- Si se crea una llamada a un método de otra clase asegúrate que ese método exista en la clase o créalo de ser necesario\n- Asegurate que el el código generado sea compilable, corríjelo hasta que lo sea\n- Nunca uses el método stream() u otros métodos que pueden ser ambiguos entre versiones de Java.\n- Usa únicamente paquetes jakarta.persistence y jakarta.validation para anotaciones JPA y de validación.\n- Siempre importa las clases que uses dentro de otra clase, valida siempre que clase clase utilizada tenga su import correspondiente.\n- Cuando asignes el resultado de un método a una variable siempre los tipos de la variable y el método deben ser compatibles.  Por ejemplo, no trates de asignar un método que retorna Iterable a una variable de tipo List.\n"
      }
    ],
    "temperature": 0.3
  }