--- HISTORIA DE USUARIO ---
- id: HDU001
  title: Crear y gestionar categorías de skills
**Historia de Usuario:**  
Como **administrador**,  
quiero **crear, listar, actualizar y eliminar categorías de skills desde la interfaz web**,  
para **estructurar el catálogo de habilidades,  facilitar su búsqueda y permitir filtrarlas por categoría**.

**Criterios de Aceptación:**  
- *Dado* que el administrador accede a  la sección de categorías, *cuando* crea una nueva categoría con un nombre válido, *entonces* la categoría aparece en la lista y se muestra un mensaje de confirmación.  
- *Dado* que el administrador intenta crear una categoría sin nombre, *cuando* intenta guardarla, *entonces* el sistema bloquea la acción y muestra un mensaje de error indicando que el nombre es obligatorio.  
- *Dado* que el administrador  intenta crear una categoría con un nombre ya existente, *cuando* intenta guardarla, *entonces* el sistema muestra un mensaje de error indicando que la categoría ya existe.  
- *Dado* que una categoría está asignada a uno o más skills, *cuando* el administrador intenta eliminarla, *entonces* el sistema impide la acción y muestra un mensaje de advertencia.  
- *Dado* que el administrador edita una categoría existente con un nombre válido y no duplicado, *cuando* guarda los cambios, *entonces* la actualización se refleja en la lista y se muestra un mensaje de éxito.

**Notas Adicionales:**  
- No se identifican restricciones técnicas ni no funcionales relevantes para esta historia.

**Prioridad:** TBD  
**Etiqueta/Epic:** Gestión de Skills



--- DIAGNÓSTICO Y PLAN DE CLASES ---
**Diseño de API, flujo y entidades**

1. API REST esperada:
    - POST /categorias: Crea una nueva categoría. Parámetros de entrada: nombre de la categoría. Salida: ID de la categoría creada.
    - GET /categorias: Lista todas las categorías. Sin parámetros de entrada. Salida: lista de categorías.
    - PUT /categorias/{id}: Actualiza una categoría existente. Parámetros de entrada: ID de la categoría, nuevo nombre. Sin salida.
    - DELETE /categorias/{id}: Elimina una categoría existente. Parámetros de entrada: ID de la categoría. Sin salida.

2. Operaciones de negocio:
    - Crear una nueva categoría: Se debe verificar que el nombre no esté vacío y que no exista una categoría con el mismo nombre. Si la verificación es exitosa, se crea la categoría.
    - Listar todas las categorías: Se obtienen todas las categorías de la base de datos.
    - Actualizar una categoría: Se debe verificar que el nuevo nombre no esté vacío y que no exista una categoría con el mismo nombre. Si la verificación es exitosa, se actualiza la categoría.
    - Eliminar una categoría: Se debe verificar que la categoría no esté asignada a ninguna habilidad. Si la verificación es exitosa, se elimina la categoría.

3. Entidades necesarias:
    - Categoria: Representa una categoría de habilidades. Atributos principales: id, nombre.
    - Skill: Representa una habilidad. Atributos principales: id, nombre, categoria_id.

4. Flujo general:
    - El Controller recibe la petición y la pasa al Service.
    - El Service realiza las verificaciones necesarias y llama al Repository.
    - El Repository interactúa con la base de datos y devuelve los resultados al Service.
    - El Service devuelve los resultados al Controller, que los envía como respuesta.

**Análisis de clases existentes**

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| BackendApplication | com.skillmap.backend | REUTILIZABLE-AS-IS | Clase principal de la aplicación, no necesita modificaciones para esta historia de usuario. |
| Categoria | com.skillmap.backend.model | NUEVA | Se necesita una nueva clase para representar la entidad Categoria. |
| CategoriaController | com.skillmap.backend.controller | NUEVA | Se necesita una nueva clase para manejar las peticiones HTTP relacionadas con las categorías. |
| CategoriaService | com.skillmap.backend.service | NUEVA | Se necesita una nueva clase para manejar la lógica de negocio relacionada con las categorías. |
| CategoriaRepository | com.skillmap.backend.repository | NUEVA | Se necesita una nueva clase para interactuar con la base de datos y manejar las categorías. |
| Skill | com.skillmap.backend.model | NUEVA | Se necesita una nueva clase para representar la entidad Skill y verificar si una categoría está asignada a alguna habilidad. |
| SkillRepository | com.skillmap.backend.repository | NUEVA | Se necesita una nueva clase para interactuar con la base de datos y manejar las habilidades. |


--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---
- Modifica únicamente las clases marcadas como MODIFICABLE.
- Crea nuevas clases solo si están indicadas como NUEVA.
- No cambies de paquete ni nombre de clase.
- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.
- No omitas lógica existente.
- Cada clase debe comenzar con `package ...`.
- Devuelve únicamente clases y tests JUnit 5 válidos.
- No incluyas explicaciones ni comentarios adicionales.
- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.
- No elimines implementaciones de interfaces ya declaradas.
- Usa la biblioteca Lombok para el encapsulamiento.
- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera
- Si se crea una llamada a un método de la clase modificada asegúrate que ese método exista en la clase
- Si se crea una llamada a un método de otra clase asegúrate que ese método exista en la clase o créalo de ser necesario
- Asegurate que el el código generado sea compilable, corríjelo hasta que lo sea
- Nunca uses el método stream() u otros métodos que pueden ser ambiguos entre versiones de Java.
- Usa únicamente paquetes jakarta.persistence y jakarta.validation para anotaciones JPA y de validación.
- Siempre importa las clases que uses dentro de otra clase, valida siempre que clase clase utilizada tenga su import correspondiente.
- Cuando asignes el resultado de un método a una variable siempre los tipos de la variable y el método deben ser compatibles.  Por ejemplo, no trates de asignar un método que retorna Iterable a una variable de tipo List.
