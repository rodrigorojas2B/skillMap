--- HISTORIA DE USUARIO ---
- id: HDU003
  title: Asociar contenido de aprendizaje a skills
  descripcion: Como administrador, quiero poder asociar cursos y pruebas a un skill,
    indicando el nivel objetivo (de 1 a 5), para ayudar en la nivelación de colaboradores.
  entidad: Contenido
  campos:
  - nivel
  - url_curso
  - url_test
  - skill_id
  acciones:
  - POST
  - GET
  - PUT
  - DELETE
  validaciones:
  - nivel entre 1 y 5

--- DIAGNÓSTICO Y PLAN DE CLASES ---
--- ANÁLISIS DE CLASES EXISTENTES ---

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| Skill | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No se requiere ninguna modificación en esta clase para la historia de usuario |
| Categoria | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No se requiere ninguna modificación en esta clase para la historia de usuario |
| SkillController | com.skillmap.backend.controller | MODIFICABLE | Se requiere agregar nuevos métodos para manejar las operaciones de Contenido |
| CategoriaController | com.skillmap.backend.controller | REUTILIZABLE-AS-IS | No se requiere ninguna modificación en esta clase para la historia de usuario |
| SkillRepository | com.skillmap.backend.repository | REUTILIZABLE-AS-IS | No se requiere ninguna modificación en esta clase para la historia de usuario |
| CategoriaRepository | com.skillmap.backend.repository | REUTILIZABLE-AS-IS | No se requiere ninguna modificación en esta clase para la historia de usuario |
| SkillService | com.skillmap.backend.service | MODIFICABLE | Se requiere agregar nuevos métodos para manejar las operaciones de Contenido |
| CategoriaService | com.skillmap.backend.service | REUTILIZABLE-AS-IS | No se requiere ninguna modificación en esta clase para la historia de usuario |
| BackendApplication | com.skillmap.backend | REUTILIZABLE-AS-IS | No se requiere ninguna modificación en esta clase para la historia de usuario |
| Contenido | com.skillmap.backend.model | NUEVA | Se requiere una nueva clase para representar el Contenido |
| ContenidoController | com.skillmap.backend.controller | NUEVA | Se requiere una nueva clase para manejar las operaciones de Contenido |
| ContenidoRepository | com.skillmap.backend.repository | NUEVA | Se requiere una nueva clase para manejar las operaciones de Contenido |
| ContenidoService | com.skillmap.backend.service | NUEVA | Se requiere una nueva clase para manejar las operaciones de Contenido |

--- INSTRUCCIONES DE MODIFICACIÓN ---
- Crear la clase Contenido en el paquete com.skillmap.backend.model con los campos nivel, url_curso, url_test y skill_id.
- Crear la clase ContenidoController en el paquete com.skillmap.backend.controller con los métodos POST, GET, PUT y DELETE para manejar las operaciones de Contenido.
- Crear la clase ContenidoRepository en el paquete com.skillmap.backend.repository para manejar las operaciones de base de datos de Contenido.
- Crear la clase ContenidoService en el paquete com.skillmap.backend.service con los métodos para manejar las operaciones de Contenido.
- Modificar la clase SkillController en el paquete com.skillmap.backend.controller para agregar los métodos para manejar las operaciones de Contenido.
- Modificar la clase SkillService en el paquete com.skillmap.backend.service para agregar los métodos para manejar las operaciones de Contenido.

--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---
- Modifica únicamente las clases marcadas como MODIFICABLE.
- Crea nuevas clases solo si están indicadas como NUEVA.
- No cambies de paquete ni nombre de clase.
- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.
- No omitas lógica existente.
- Cada clase debe comenzar con `package ...`.
- Devuelve únicamente clases y tests JUnit 5 válidos.
- No incluyas explicaciones ni comentarios adicionales.
- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.
- No elimines implementaciones de interfaces ya declaradas.
- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera
- Si se crea una llamada a un método de la clase modificada asegúrate que ese método exista en la clase
- Si se crea una llamada a un método de otra clase asegúrate que ese método exista en la clase o créalo de ser necesario
- Asegurate que el el código generado sea compilable, corríjelo hasta que lo sea
- Nunca uses el método stream() u otros métodos que pueden ser ambiguos entre versiones de Java.
- Usa únicamente paquetes jakarta.persistence y jakarta.validation para anotaciones JPA y de validación.
- Siempre importa las clases que uses dentro de otra clase, valida siempre que clase clase utilizada tenga su import correspondiente.
- Cuando asignes el resultado de un método a una variable siempre los tipos de la variable y el método deben ser compatibles.  Por ejemplo, no trates de asignar un método que retorna Iterable a una variable de tipo List.
