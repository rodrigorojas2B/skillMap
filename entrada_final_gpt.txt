--- HISTORIA DE USUARIO ---
- id: HDU005
  title: Definir el nivel esperado de cada skill por rol y grado
  descripcion: Como administrador, quiero poder definir para cada rol y grado el nivel
    técnico mínimo requerido por skill (de 1 a 5) para facilitar la evaluación de
    desempeño.
  entidad: SkillMap
  campos:
  - rol_id
  - grado
  - skill_id
  - nivel_base
  validaciones:
  - nivel_base entre 1 y 5
  - combinación única (rol_id, grado, skill_id)

--- DIAGNÓSTICO Y PLAN DE CLASES ---
--- ANÁLISIS DE CLASES EXISTENTES ---

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| Contenido | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |
| Skill | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |
| Especialidad | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |
| Rol | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |
| Categoria | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |
| SkillController | com.skillmap.backend.controller | MODIFICABLE | Se necesita agregar funcionalidad para manejar el mapeo de habilidades |
| CategoriaController | com.skillmap.backend.controller | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |
| ContenidoController | com.skillmap.backend.controller | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |
| RolController | com.skillmap.backend.controller | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |
| ContenidoRepository | com.skillmap.backend.repository | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |
| SkillRepository | com.skillmap.backend.repository | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |
| RolRepository | com.skillmap.backend.repository | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |
| CategoriaRepository | com.skillmap.backend.repository | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |
| ContenidoService | com.skillmap.backend.service | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |
| SkillService | com.skillmap.backend.service | MODIFICABLE | Se necesita agregar funcionalidad para manejar el mapeo de habilidades |
| RolService | com.skillmap.backend.service | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |
| CategoriaService | com.skillmap.backend.service | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |
| SkillMap | N/A | NUEVA | Se necesita para manejar el mapeo de habilidades |
| SkillMapController | N/A | NUEVA | Se necesita para manejar las solicitudes HTTP relacionadas con el mapeo de habilidades |
| SkillMapRepository | N/A | NUEVA | Se necesita para manejar la persistencia de datos del mapeo de habilidades |
| SkillMapService | N/A | NUEVA | Se necesita para manejar la lógica de negocio del mapeo de habilidades |

--- INSTRUCCIONES DE MODIFICACIÓN ---
- Crear la clase SkillMap en el paquete com.skillmap.backend.model. Esta clase debe tener los campos rol_id, grado, skill_id y nivel_base.
- Crear la clase SkillMapController en el paquete com.skillmap.backend.controller. Esta clase debe manejar las solicitudes HTTP relacionadas con el mapeo de habilidades.
- Crear la clase SkillMapRepository en el paquete com.skillmap.backend.repository. Esta clase debe manejar la persistencia de datos del mapeo de habilidades.
- Crear la clase SkillMapService en el paquete com.skillmap.backend.service. Esta clase debe manejar la lógica de negocio del mapeo de habilidades.
- Modificar la clase SkillController para agregar funcionalidad para manejar el mapeo de habilidades.
- Modificar la clase SkillService para agregar funcionalidad para manejar el mapeo de habilidades.

--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---
- Modifica únicamente las clases marcadas como MODIFICABLE.
- Crea nuevas clases solo si están indicadas como NUEVA.
- No cambies de paquete ni nombre de clase.
- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.
- No omitas lógica existente.
- Cada clase debe comenzar con `package ...`.
- Devuelve únicamente clases y tests JUnit 5 válidos.
- No incluyas explicaciones ni comentarios adicionales.
- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.
- No elimines implementaciones de interfaces ya declaradas.
- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera
- Si se crea una llamada a un método de la clase modificada asegúrate que ese método exista en la clase
- Si se crea una llamada a un método de otra clase asegúrate que ese método exista en la clase o créalo de ser necesario
- Asegurate que el el código generado sea compilable, corríjelo hasta que lo sea
- Nunca uses el método stream() u otros métodos que pueden ser ambiguos entre versiones de Java.
- Usa únicamente paquetes jakarta.persistence y jakarta.validation para anotaciones JPA y de validación.
- Siempre importa las clases que uses dentro de otra clase, valida siempre que clase clase utilizada tenga su import correspondiente.
- Cuando asignes el resultado de un método a una variable siempre los tipos de la variable y el método deben ser compatibles.  Por ejemplo, no trates de asignar un método que retorna Iterable a una variable de tipo List.
