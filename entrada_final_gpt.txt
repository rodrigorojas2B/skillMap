--- HISTORIA DE USUARIO ---
- id: HDU001
  title: Crear y gestionar categorías de skills
  descripcion: 'Como administrador, quiero poder crear, listar, actualizar y eliminar
    categorías de skills (por ejemplo: Lenguajes, DevOps, Bases de Datos) para organizar
    los skills disponibles.'
  entidad: Categoria
  campos:
  - id
  - nombre
  acciones:
  - POST
  - GET
  - PUT
  - DELETE
  validaciones:
  - nombre obligatorio
  - nombre único


--- DIAGNÓSTICO Y PLAN DE CLASES ---
--- ANÁLISIS DE CLASES EXISTENTES ---

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| BackendApplication | com.skillmap.backend | REUTILIZABLE-AS-IS | Clase principal de la aplicación Spring Boot |

--- INSTRUCCIONES DE MODIFICACIÓN ---

De acuerdo con la historia de usuario proporcionada, necesitamos crear una entidad `Categoria` con los campos `id` y `nombre`. También necesitamos implementar las operaciones CRUD (Crear, Leer, Actualizar, Eliminar) para esta entidad. Como no se proporcionan clases existentes que puedan ser reutilizadas o modificadas para este propósito, todas las clases necesarias para implementar esta funcionalidad son nuevas.

Las clases que necesitamos crear son:

- `Categoria`: Esta es la entidad que representa una categoría de habilidades. Debe tener los campos `id` y `nombre`.
- `CategoriaRepository`: Esta es la interfaz que proporciona las operaciones CRUD para la entidad `Categoria`.
- `CategoriaService`: Esta es la clase que implementa la lógica de negocio para la entidad `Categoria`.
- `CategoriaController`: Esta es la clase que maneja las solicitudes HTTP para la entidad `Categoria`.

Además, necesitamos implementar las validaciones para la entidad `Categoria`. En particular, necesitamos asegurarnos de que el campo `nombre` es obligatorio y único. Estas validaciones pueden ser implementadas en la clase `CategoriaService`.

Finalmente, necesitamos implementar pruebas unitarias para asegurarnos de que nuestra implementación es correcta. Estas pruebas pueden ser implementadas en una clase `CategoriaServiceTest`.

--- CÓDIGO A GENERAR ---

El código a generar incluirá las clases `Categoria`, `CategoriaRepository`, `CategoriaService`, `CategoriaController` y `CategoriaServiceTest`. Cada una de estas clases debe estar en su paquete correcto, según lo indicado en la tabla de análisis de clases existentes.

--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---
- Modifica únicamente las clases marcadas como MODIFICABLE.
- Crea nuevas clases solo si están indicadas como NUEVA.
- No cambies de paquete ni nombre de clase.
- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.
- No omitas lógica existente.
- Cada clase debe comenzar con `package ...`.
- Devuelve únicamente clases y tests JUnit 5 válidos.
- No incluyas explicaciones ni comentarios adicionales.
- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.
- No elimines implementaciones de interfaces ya declaradas.
- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera
- Si se crea una llamada a un método de la clase modificada asegúrate que ese método exista en la clase
- Si se crea una llamada a un método de otra clase asegúrate que ese método exista en la clase o créalo de ser necesario
- Asegurate que el el código generado sea compilable, corríjelo hasta que lo sea
- Nunca uses el método stream() u otros métodos que pueden ser ambiguos entre versiones de Java.
- Usa únicamente paquetes jakarta.persistence y jakarta.validation para anotaciones JPA y de validación.
- Siempre importa las clases que uses dentro de otra clase, valida siempre que clase clase utilizada tenga su import correspondiente.
- Cuando asignes el resultado de un método a una variable siempre los tipos de la variable y el método deben ser compatibles.  Por ejemplo, no trates de asignar un método que retorna Iterable a una variable de tipo List.
