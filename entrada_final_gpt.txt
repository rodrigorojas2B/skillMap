--- HISTORIA DE USUARIO ---
- id: HDU006
  title: Registrar y mantener colaboradores
  descripcion: Como administrador, quiero registrar los colaboradores activos en la
    organización para luego evaluar sus skills.
  entidad: Colaborador
  campos:
  - id
  - nombre
  - paterno
  - materno
  - id_calibrador_actual
  validaciones:
  - id único
  - relación opcional a otro colaborador como calibrador

--- DIAGNÓSTICO Y PLAN DE CLASES ---
--- ANÁLISIS DE CLASES EXISTENTES ---

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| Contenido | com.skillmap.backend.model | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| Skill | com.skillmap.backend.model | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| Especialidad | com.skillmap.backend.model | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| Rol | com.skillmap.backend.model | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| SkillMap | com.skillmap.backend.model | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| Categoria | com.skillmap.backend.model | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| SkillController | com.skillmap.backend.controller | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| CategoriaController | com.skillmap.backend.controller | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| ContenidoController | com.skillmap.backend.controller | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| RolController | com.skillmap.backend.controller | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| SkillMapController | com.skillmap.backend.controller | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| SkillMapRepository | com.skillmap.backend.repository | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| ContenidoRepository | com.skillmap.backend.repository | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| SkillRepository | com.skillmap.backend.repository | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| RolRepository | com.skillmap.backend.repository | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| CategoriaRepository | com.skillmap.backend.repository | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| ContenidoService | com.skillmap.backend.service | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| SkillService | com.skillmap.backend.service | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| SkillMapService | com.skillmap.backend.service | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| RolService | com.skillmap.backend.service | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| CategoriaService | com.skillmap.backend.service | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| BackendApplication | com.skillmap.backend | MODIFICABLE | No requiere cambios para la historia de usuario, pero podría requerir modificaciones para futuras historias |
| Colaborador | N/A | NUEVA | Clase necesaria para la historia de usuario |
| ColaboradorController | N/A | NUEVA | Clase necesaria para la historia de usuario |
| ColaboradorService | N/A | NUEVA | Clase necesaria para la historia de usuario |
| ColaboradorRepository | N/A | NUEVA | Clase necesaria para la historia de usuario |

--- INSTRUCCIONES DE MODIFICACIÓN ---
- Crear la clase `Colaborador` en el paquete `com.skillmap.backend.model` con los atributos `id`, `nombre`, `paterno`, `materno` y `id_calibrador_actual`.
- Crear la clase `ColaboradorController` en el paquete `com.skillmap.backend.controller` con los métodos necesarios para manejar las solicitudes HTTP relacionadas con los colaboradores.
- Crear la clase `ColaboradorService` en el paquete `com.skillmap.backend.service` con los métodos necesarios para manejar la lógica de negocio relacionada con los colaboradores.
- Crear la clase `ColaboradorRepository` en el paquete `com.skillmap.backend.repository` con los métodos necesarios para manejar las operaciones de base de datos relacionadas con los colaboradores.

--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---
- Modifica únicamente las clases marcadas como MODIFICABLE.
- Crea nuevas clases solo si están indicadas como NUEVA.
- No cambies de paquete ni nombre de clase.
- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.
- No omitas lógica existente.
- Cada clase debe comenzar con `package ...`.
- Devuelve únicamente clases y tests JUnit 5 válidos.
- No incluyas explicaciones ni comentarios adicionales.
- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.
- No elimines implementaciones de interfaces ya declaradas.
- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera
- Si se crea una llamada a un método de la clase modificada asegúrate que ese método exista en la clase
- Si se crea una llamada a un método de otra clase asegúrate que ese método exista en la clase o créalo de ser necesario
- Asegurate que el el código generado sea compilable, corríjelo hasta que lo sea
- Nunca uses el método stream() u otros métodos que pueden ser ambiguos entre versiones de Java.
- Usa únicamente paquetes jakarta.persistence y jakarta.validation para anotaciones JPA y de validación.
- Siempre importa las clases que uses dentro de otra clase, valida siempre que clase clase utilizada tenga su import correspondiente.
- Cuando asignes el resultado de un método a una variable siempre los tipos de la variable y el método deben ser compatibles.  Por ejemplo, no trates de asignar un método que retorna Iterable a una variable de tipo List.
