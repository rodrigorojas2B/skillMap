--- HISTORIA DE USUARIO ---
- id: HDU004
  title: Crear y mantener roles técnicos
  descripcion: Como administrador, quiero poder definir roles como “Desarrollador
    Backend” o “DevOps Engineer” junto con su especialidad y grado, para asociarlos
    luego a skills y colaboradores.
  entidad: Rol
  campos:
  - nombre
  - descripcion
  - especialidad_id
  - grado
  valores_validos:
    grado:
    - Trainee
    - Junior
    - Pleno
    - Semi-Senior
    - Senior
    - Experto
  relaciones:
  - especialidad (FK)

--- DIAGNÓSTICO Y PLAN DE CLASES ---
--- ANÁLISIS DE CLASES EXISTENTES ---
Genera una tabla Markdown como esta:

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| Contenido | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No se requiere ninguna modificación para esta historia de usuario |
| Skill | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No se requiere ninguna modificación para esta historia de usuario |
| Categoria | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No se requiere ninguna modificación para esta historia de usuario |
| SkillController | com.skillmap.backend.controller | REUTILIZABLE-AS-IS | No se requiere ninguna modificación para esta historia de usuario |
| CategoriaController | com.skillmap.backend.controller | REUTILIZABLE-AS-IS | No se requiere ninguna modificación para esta historia de usuario |
| ContenidoController | com.skillmap.backend.controller | REUTILIZABLE-AS-IS | No se requiere ninguna modificación para esta historia de usuario |
| ContenidoRepository | com.skillmap.backend.repository | REUTILIZABLE-AS-IS | No se requiere ninguna modificación para esta historia de usuario |
| SkillRepository | com.skillmap.backend.repository | REUTILIZABLE-AS-IS | No se requiere ninguna modificación para esta historia de usuario |
| CategoriaRepository | com.skillmap.backend.repository | REUTILIZABLE-AS-IS | No se requiere ninguna modificación para esta historia de usuario |
| ContenidoService | com.skillmap.backend.service | REUTILIZABLE-AS-IS | No se requiere ninguna modificación para esta historia de usuario |
| SkillService | com.skillmap.backend.service | REUTILIZABLE-AS-IS | No se requiere ninguna modificación para esta historia de usuario |
| CategoriaService | com.skillmap.backend.service | REUTILIZABLE-AS-IS | No se requiere ninguna modificación para esta historia de usuario |
| BackendApplication | com.skillmap.backend | REUTILIZABLE-AS-IS | No se requiere ninguna modificación para esta historia de usuario |
| Rol | com.skillmap.backend.model | NUEVA | Se necesita para implementar la funcionalidad de la historia de usuario |
| RolController | com.skillmap.backend.controller | NUEVA | Se necesita para implementar la funcionalidad de la historia de usuario |
| RolRepository | com.skillmap.backend.repository | NUEVA | Se necesita para implementar la funcionalidad de la historia de usuario |
| RolService | com.skillmap.backend.service | NUEVA | Se necesita para implementar la funcionalidad de la historia de usuario |

--- INSTRUCCIONES DE MODIFICACIÓN ---
- No se requiere ninguna modificación en las clases existentes para esta historia de usuario.
- Se deben crear nuevas clases para implementar la funcionalidad de la historia de usuario.

--- CÓDIGO A GENERAR ---
No se requiere generar código en este momento ya que solo se está realizando el análisis de las clases existentes y la planificación de las nuevas clases necesarias.

--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---
- Modifica únicamente las clases marcadas como MODIFICABLE.
- Crea nuevas clases solo si están indicadas como NUEVA.
- No cambies de paquete ni nombre de clase.
- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.
- No omitas lógica existente.
- Cada clase debe comenzar con `package ...`.
- Devuelve únicamente clases y tests JUnit 5 válidos.
- No incluyas explicaciones ni comentarios adicionales.
- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.
- No elimines implementaciones de interfaces ya declaradas.
- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera
- Si se crea una llamada a un método de la clase modificada asegúrate que ese método exista en la clase
- Si se crea una llamada a un método de otra clase asegúrate que ese método exista en la clase o créalo de ser necesario
- Asegurate que el el código generado sea compilable, corríjelo hasta que lo sea
- Nunca uses el método stream() u otros métodos que pueden ser ambiguos entre versiones de Java.
- Usa únicamente paquetes jakarta.persistence y jakarta.validation para anotaciones JPA y de validación.
- Siempre importa las clases que uses dentro de otra clase, valida siempre que clase clase utilizada tenga su import correspondiente.
- Cuando asignes el resultado de un método a una variable siempre los tipos de la variable y el método deben ser compatibles.  Por ejemplo, no trates de asignar un método que retorna Iterable a una variable de tipo List.
