{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador de código Java experto en Spring Boot. Tu salida debe contener únicamente código fuente Java completamente válido. Cada clase debe comenzar con 'package ...' y contener la declaración completa de la clase (public class, interface o enum). No debes escribir ningún texto explicativo, encabezado, numeración, ni comentarios como '1.', '2.', 'Test Unitario:', etc. Si la clase ya existe en el repositorio, debes conservar su package original y todos sus métodos, incluso si no se modifican. No puedes inventar nuevos packages como 'com.example.demo'. Si una clase es nueva, debe estar marcada como NUEVA en el análisis previo. No escribas ningún contenido fuera de los bloques de código. El resultado debe ser compilable sin errores ni contenido basura."
    },
    {
      "role": "user",
      "content": "--- HISTORIA DE USUARIO ---\n- id: HDU003\n  title: Asociar contenido de aprendizaje a skills\n  descripcion: Como administrador, quiero poder asociar cursos y pruebas a un skill,\n    indicando el nivel objetivo (de 1 a 5), para ayudar en la nivelación de colaboradores.\n  entidad: Contenido\n  campos:\n  - nivel\n  - url_curso\n  - url_test\n  - skill_id\n  acciones:\n  - POST\n  - GET\n  - PUT\n  - DELETE\n  validaciones:\n  - nivel entre 1 y 5\n\n--- DIAGNÓSTICO Y PLAN DE CLASES ---\n--- ANÁLISIS DE CLASES EXISTENTES ---\n\n| Clase Java | Package | Clasificación | Motivo |\n|------------|---------|----------------|--------|\n| Skill | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No se requiere ninguna modificación en esta clase para la historia de usuario |\n| Categoria | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No se requiere ninguna modificación en esta clase para la historia de usuario |\n| SkillController | com.skillmap.backend.controller | MODIFICABLE | Se requiere agregar nuevos métodos para manejar las operaciones de Contenido |\n| CategoriaController | com.skillmap.backend.controller | REUTILIZABLE-AS-IS | No se requiere ninguna modificación en esta clase para la historia de usuario |\n| SkillRepository | com.skillmap.backend.repository | REUTILIZABLE-AS-IS | No se requiere ninguna modificación en esta clase para la historia de usuario |\n| CategoriaRepository | com.skillmap.backend.repository | REUTILIZABLE-AS-IS | No se requiere ninguna modificación en esta clase para la historia de usuario |\n| SkillService | com.skillmap.backend.service | MODIFICABLE | Se requiere agregar nuevos métodos para manejar las operaciones de Contenido |\n| CategoriaService | com.skillmap.backend.service | REUTILIZABLE-AS-IS | No se requiere ninguna modificación en esta clase para la historia de usuario |\n| BackendApplication | com.skillmap.backend | REUTILIZABLE-AS-IS | No se requiere ninguna modificación en esta clase para la historia de usuario |\n| Contenido | com.skillmap.backend.model | NUEVA | Se requiere una nueva clase para representar el Contenido |\n| ContenidoController | com.skillmap.backend.controller | NUEVA | Se requiere una nueva clase para manejar las operaciones de Contenido |\n| ContenidoRepository | com.skillmap.backend.repository | NUEVA | Se requiere una nueva clase para manejar las operaciones de Contenido |\n| ContenidoService | com.skillmap.backend.service | NUEVA | Se requiere una nueva clase para manejar las operaciones de Contenido |\n\n--- INSTRUCCIONES DE MODIFICACIÓN ---\n- Crear la clase Contenido en el paquete com.skillmap.backend.model con los campos nivel, url_curso, url_test y skill_id.\n- Crear la clase ContenidoController en el paquete com.skillmap.backend.controller con los métodos POST, GET, PUT y DELETE para manejar las operaciones de Contenido.\n- Crear la clase ContenidoRepository en el paquete com.skillmap.backend.repository para manejar las operaciones de base de datos de Contenido.\n- Crear la clase ContenidoService en el paquete com.skillmap.backend.service con los métodos para manejar las operaciones de Contenido.\n- Modificar la clase SkillController en el paquete com.skillmap.backend.controller para agregar los métodos para manejar las operaciones de Contenido.\n- Modificar la clase SkillService en el paquete com.skillmap.backend.service para agregar los métodos para manejar las operaciones de Contenido.\n\n--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---\n- Modifica únicamente las clases marcadas como MODIFICABLE.\n- Crea nuevas clases solo si están indicadas como NUEVA.\n- No cambies de paquete ni nombre de clase.\n- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.\n- No omitas lógica existente.\n- Cada clase debe comenzar con `package ...`.\n- Devuelve únicamente clases y tests JUnit 5 válidos.\n- No incluyas explicaciones ni comentarios adicionales.\n- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.\n- No elimines implementaciones de interfaces ya declaradas.\n- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera\n- Si se crea una llamada a un método de la clase modificada asegúrate que ese método exista en la clase\n- Si se crea una llamada a un método de otra clase asegúrate que ese método exista en la clase o créalo de ser necesario\n- Asegurate que el el código generado sea compilable, corríjelo hasta que lo sea\n- Nunca uses el método stream() u otros métodos que pueden ser ambiguos entre versiones de Java.\n- Usa únicamente paquetes jakarta.persistence y jakarta.validation para anotaciones JPA y de validación.\n- Siempre importa las clases que uses dentro de otra clase, valida siempre que clase clase utilizada tenga su import correspondiente.\n- Cuando asignes el resultado de un método a una variable siempre los tipos de la variable y el método deben ser compatibles.  Por ejemplo, no trates de asignar un método que retorna Iterable a una variable de tipo List.\n"
    }
  ],
  "temperature": 0.3
}
