{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador de código Java experto en Spring Boot. Tu salida debe contener únicamente código fuente Java completamente válido. Cada clase debe comenzar con 'package ...' y contener la declaración completa de la clase (public class, interface o enum). No debes escribir ningún texto explicativo, encabezado, numeración, ni comentarios como '1.', '2.', 'Test Unitario:', etc. Si la clase ya existe en el repositorio, debes conservar su package original y todos sus métodos, incluso si no se modifican. No puedes inventar nuevos packages como 'com.example.demo'. Si una clase es nueva, debe estar marcada como NUEVA en el análisis previo. No escribas ningún contenido fuera de los bloques de código. El resultado debe ser compilable sin errores ni contenido basura."
    },
    {
      "role": "user",
      "content": "--- HISTORIA DE USUARIO ---\n- id: HDU001\n  title: Crear y gestionar categorías de skills\n**Historia de Usuario:**  \nComo **administrador**,  \nquiero **crear, listar, actualizar y eliminar categorías de skills desde la interfaz web**,  \npara **estructurar el catálogo de habilidades,  facilitar su búsqueda y permitir filtrarlas por categoría**.\n\n**Criterios de Aceptación:**  \n- *Dado* que el administrador accede a  la sección de categorías, *cuando* crea una nueva categoría con un nombre válido, *entonces* la categoría aparece en la lista y se muestra un mensaje de confirmación.  \n- *Dado* que el administrador intenta crear una categoría sin nombre, *cuando* intenta guardarla, *entonces* el sistema bloquea la acción y muestra un mensaje de error indicando que el nombre es obligatorio.  \n- *Dado* que el administrador  intenta crear una categoría con un nombre ya existente, *cuando* intenta guardarla, *entonces* el sistema muestra un mensaje de error indicando que la categoría ya existe.  \n- *Dado* que una categoría está asignada a uno o más skills, *cuando* el administrador intenta eliminarla, *entonces* el sistema impide la acción y muestra un mensaje de advertencia.  \n- *Dado* que el administrador edita una categoría existente con un nombre válido y no duplicado, *cuando* guarda los cambios, *entonces* la actualización se refleja en la lista y se muestra un mensaje de éxito.\n\n**Notas Adicionales:**  \n- No se identifican restricciones técnicas ni no funcionales relevantes para esta historia.\n\n**Prioridad:** TBD  \n**Etiqueta/Epic:** Gestión de Skills\n\n\n\n--- DIAGNÓSTICO Y PLAN DE CLASES ---\n**Diseño de API, flujo y entidades**\n\n1. API REST esperada:\n    - POST /categorias: Crea una nueva categoría. Parámetros de entrada: nombre de la categoría. Salida: ID de la categoría creada.\n    - GET /categorias: Lista todas las categorías. Sin parámetros de entrada. Salida: lista de categorías.\n    - PUT /categorias/{id}: Actualiza una categoría existente. Parámetros de entrada: ID de la categoría, nuevo nombre. Sin salida.\n    - DELETE /categorias/{id}: Elimina una categoría existente. Parámetros de entrada: ID de la categoría. Sin salida.\n\n2. Operaciones de negocio:\n    - Crear una nueva categoría: Se debe verificar que el nombre no esté vacío y que no exista una categoría con el mismo nombre. Si la verificación es exitosa, se crea la categoría.\n    - Listar todas las categorías: Se obtienen todas las categorías de la base de datos.\n    - Actualizar una categoría: Se debe verificar que el nuevo nombre no esté vacío y que no exista una categoría con el mismo nombre. Si la verificación es exitosa, se actualiza la categoría.\n    - Eliminar una categoría: Se debe verificar que la categoría no esté asignada a ninguna habilidad. Si la verificación es exitosa, se elimina la categoría.\n\n3. Entidades necesarias:\n    - Categoria: Representa una categoría de habilidades. Atributos principales: id, nombre.\n    - Skill: Representa una habilidad. Atributos principales: id, nombre, categoria_id.\n\n4. Flujo general:\n    - El Controller recibe la petición y la pasa al Service.\n    - El Service realiza las verificaciones necesarias y llama al Repository.\n    - El Repository interactúa con la base de datos y devuelve los resultados al Service.\n    - El Service devuelve los resultados al Controller, que los envía como respuesta.\n\n**Análisis de clases existentes**\n\n| Clase Java | Package | Clasificación | Motivo |\n|------------|---------|----------------|--------|\n| BackendApplication | com.skillmap.backend | REUTILIZABLE-AS-IS | Clase principal de la aplicación, no necesita modificaciones para esta historia de usuario. |\n| Categoria | com.skillmap.backend.model | NUEVA | Se necesita una nueva clase para representar la entidad Categoria. |\n| CategoriaController | com.skillmap.backend.controller | NUEVA | Se necesita una nueva clase para manejar las peticiones HTTP relacionadas con las categorías. |\n| CategoriaService | com.skillmap.backend.service | NUEVA | Se necesita una nueva clase para manejar la lógica de negocio relacionada con las categorías. |\n| CategoriaRepository | com.skillmap.backend.repository | NUEVA | Se necesita una nueva clase para interactuar con la base de datos y manejar las categorías. |\n| Skill | com.skillmap.backend.model | NUEVA | Se necesita una nueva clase para representar la entidad Skill y verificar si una categoría está asignada a alguna habilidad. |\n| SkillRepository | com.skillmap.backend.repository | NUEVA | Se necesita una nueva clase para interactuar con la base de datos y manejar las habilidades. |\n\n\n--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---\n- Modifica únicamente las clases marcadas como MODIFICABLE.\n- Crea nuevas clases solo si están indicadas como NUEVA.\n- No cambies de paquete ni nombre de clase.\n- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.\n- No omitas lógica existente.\n- Cada clase debe comenzar con `package ...`.\n- Devuelve únicamente clases y tests JUnit 5 válidos.\n- No incluyas explicaciones ni comentarios adicionales.\n- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.\n- No elimines implementaciones de interfaces ya declaradas.\n- Usa la biblioteca Lombok para el encapsulamiento.\n- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera\n- Si se crea una llamada a un método de la clase modificada asegúrate que ese método exista en la clase\n- Si se crea una llamada a un método de otra clase asegúrate que ese método exista en la clase o créalo de ser necesario\n- Asegurate que el el código generado sea compilable, corríjelo hasta que lo sea\n- Nunca uses el método stream() u otros métodos que pueden ser ambiguos entre versiones de Java.\n- Usa únicamente paquetes jakarta.persistence y jakarta.validation para anotaciones JPA y de validación.\n- Siempre importa las clases que uses dentro de otra clase, valida siempre que clase clase utilizada tenga su import correspondiente.\n- Cuando asignes el resultado de un método a una variable siempre los tipos de la variable y el método deben ser compatibles.  Por ejemplo, no trates de asignar un método que retorna Iterable a una variable de tipo List.\n"
    }
  ],
  "temperature": 0.3
}
