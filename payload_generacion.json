{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador de código Java experto en Spring Boot. Tu salida debe contener únicamente código fuente Java completamente válido. Cada clase debe comenzar con 'package ...' y contener la declaración completa de la clase (public class, interface o enum). No debes escribir ningún texto explicativo, encabezado, numeración, ni comentarios como '1.', '2.', 'Test Unitario:', etc. Si la clase ya existe en el repositorio, debes conservar su package original y todos sus métodos, incluso si no se modifican. No puedes inventar nuevos packages como 'com.example.demo'. Si una clase es nueva, debe estar marcada como NUEVA en el análisis previo. No escribas ningún contenido fuera de los bloques de código. El resultado debe ser compilable sin errores ni contenido basura."
    },
    {
      "role": "user",
      "content": "--- HISTORIA DE USUARIO ---\n- id: HDU001\n  title: Crear y gestionar categorías de skills\n  descripcion: 'Como administrador, quiero poder crear, listar, actualizar y eliminar\n    categorías de skills (por ejemplo: Lenguajes, DevOps, Bases de Datos) para organizar\n    los skills disponibles.'\n  entidad: Categoria\n  campos:\n  - id\n  - nombre\n  acciones:\n  - POST\n  - GET\n  - PUT\n  - DELETE\n  validaciones:\n  - nombre obligatorio\n  - nombre único\n\n\n--- DIAGNÓSTICO Y PLAN DE CLASES ---\n--- ANÁLISIS DE CLASES EXISTENTES ---\n\n| Clase Java | Package | Clasificación | Motivo |\n|------------|---------|----------------|--------|\n| BackendApplication | com.skillmap.backend | REUTILIZABLE-AS-IS | Clase principal de la aplicación Spring Boot |\n\n--- INSTRUCCIONES DE MODIFICACIÓN ---\n\nDe acuerdo con la historia de usuario proporcionada, necesitamos crear una entidad `Categoria` con los campos `id` y `nombre`. También necesitamos implementar las operaciones CRUD (Crear, Leer, Actualizar, Eliminar) para esta entidad. Como no se proporcionan clases existentes que puedan ser reutilizadas o modificadas para este propósito, todas las clases necesarias para implementar esta funcionalidad son nuevas.\n\nLas clases que necesitamos crear son:\n\n- `Categoria`: Esta es la entidad que representa una categoría de habilidades. Debe tener los campos `id` y `nombre`.\n- `CategoriaRepository`: Esta es la interfaz que proporciona las operaciones CRUD para la entidad `Categoria`.\n- `CategoriaService`: Esta es la clase que implementa la lógica de negocio para la entidad `Categoria`.\n- `CategoriaController`: Esta es la clase que maneja las solicitudes HTTP para la entidad `Categoria`.\n\nAdemás, necesitamos implementar las validaciones para la entidad `Categoria`. En particular, necesitamos asegurarnos de que el campo `nombre` es obligatorio y único. Estas validaciones pueden ser implementadas en la clase `CategoriaService`.\n\nFinalmente, necesitamos implementar pruebas unitarias para asegurarnos de que nuestra implementación es correcta. Estas pruebas pueden ser implementadas en una clase `CategoriaServiceTest`.\n\n--- CÓDIGO A GENERAR ---\n\nEl código a generar incluirá las clases `Categoria`, `CategoriaRepository`, `CategoriaService`, `CategoriaController` y `CategoriaServiceTest`. Cada una de estas clases debe estar en su paquete correcto, según lo indicado en la tabla de análisis de clases existentes.\n\n--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---\n- Modifica únicamente las clases marcadas como MODIFICABLE.\n- Crea nuevas clases solo si están indicadas como NUEVA.\n- No cambies de paquete ni nombre de clase.\n- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.\n- No omitas lógica existente.\n- Cada clase debe comenzar con `package ...`.\n- Devuelve únicamente clases y tests JUnit 5 válidos.\n- No incluyas explicaciones ni comentarios adicionales.\n- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.\n- No elimines implementaciones de interfaces ya declaradas.\n- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera\n- Si se crea una llamada a un método de la clase modificada asegúrate que ese método exista en la clase\n- Si se crea una llamada a un método de otra clase asegúrate que ese método exista en la clase o créalo de ser necesario\n- Asegurate que el el código generado sea compilable, corríjelo hasta que lo sea\n- Nunca uses el método stream() u otros métodos que pueden ser ambiguos entre versiones de Java.\n- Usa únicamente paquetes jakarta.persistence y jakarta.validation para anotaciones JPA y de validación.\n- Siempre importa las clases que uses dentro de otra clase, valida siempre que clase clase utilizada tenga su import correspondiente.\n- Cuando asignes el resultado de un método a una variable siempre los tipos de la variable y el método deben ser compatibles.  Por ejemplo, no trates de asignar un método que retorna Iterable a una variable de tipo List.\n"
    }
  ],
  "temperature": 0.3
}
