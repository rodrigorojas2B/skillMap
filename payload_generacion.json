{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador de código Java experto en Spring Boot. Tu salida debe contener únicamente código fuente Java completamente válido. Cada clase debe comenzar con 'package ...' y contener la declaración completa de la clase (public class, interface o enum). No debes escribir ningún texto explicativo, encabezado, numeración, ni comentarios como '1.', '2.', 'Test Unitario:', etc. Si la clase ya existe en el repositorio, debes conservar su package original y todos sus métodos, incluso si no se modifican. No puedes inventar nuevos packages como 'com.example.demo'. Si una clase es nueva, debe estar marcada como NUEVA en el análisis previo. No escribas ningún contenido fuera de los bloques de código. El resultado debe ser compilable sin errores ni contenido basura."
    },
    {
      "role": "user",
      "content": "--- HISTORIA DE USUARIO ---\n- id: HDU005\n  title: Definir el nivel esperado de cada skill por rol y grado\n  descripcion: Como administrador, quiero poder definir para cada rol y grado el nivel\n    técnico mínimo requerido por skill (de 1 a 5) para facilitar la evaluación de\n    desempeño.\n  entidad: SkillMap\n  campos:\n  - rol_id\n  - grado\n  - skill_id\n  - nivel_base\n  validaciones:\n  - nivel_base entre 1 y 5\n  - combinación única (rol_id, grado, skill_id)\n\n--- DIAGNÓSTICO Y PLAN DE CLASES ---\n--- ANÁLISIS DE CLASES EXISTENTES ---\n\n| Clase Java | Package | Clasificación | Motivo |\n|------------|---------|----------------|--------|\n| Contenido | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |\n| Skill | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |\n| Especialidad | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |\n| Rol | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |\n| Categoria | com.skillmap.backend.model | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |\n| SkillController | com.skillmap.backend.controller | MODIFICABLE | Se necesita agregar funcionalidad para manejar el mapeo de habilidades |\n| CategoriaController | com.skillmap.backend.controller | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |\n| ContenidoController | com.skillmap.backend.controller | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |\n| RolController | com.skillmap.backend.controller | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |\n| ContenidoRepository | com.skillmap.backend.repository | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |\n| SkillRepository | com.skillmap.backend.repository | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |\n| RolRepository | com.skillmap.backend.repository | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |\n| CategoriaRepository | com.skillmap.backend.repository | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |\n| ContenidoService | com.skillmap.backend.service | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |\n| SkillService | com.skillmap.backend.service | MODIFICABLE | Se necesita agregar funcionalidad para manejar el mapeo de habilidades |\n| RolService | com.skillmap.backend.service | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |\n| CategoriaService | com.skillmap.backend.service | REUTILIZABLE-AS-IS | No requiere cambios para la historia de usuario |\n| SkillMap | N/A | NUEVA | Se necesita para manejar el mapeo de habilidades |\n| SkillMapController | N/A | NUEVA | Se necesita para manejar las solicitudes HTTP relacionadas con el mapeo de habilidades |\n| SkillMapRepository | N/A | NUEVA | Se necesita para manejar la persistencia de datos del mapeo de habilidades |\n| SkillMapService | N/A | NUEVA | Se necesita para manejar la lógica de negocio del mapeo de habilidades |\n\n--- INSTRUCCIONES DE MODIFICACIÓN ---\n- Crear la clase SkillMap en el paquete com.skillmap.backend.model. Esta clase debe tener los campos rol_id, grado, skill_id y nivel_base.\n- Crear la clase SkillMapController en el paquete com.skillmap.backend.controller. Esta clase debe manejar las solicitudes HTTP relacionadas con el mapeo de habilidades.\n- Crear la clase SkillMapRepository en el paquete com.skillmap.backend.repository. Esta clase debe manejar la persistencia de datos del mapeo de habilidades.\n- Crear la clase SkillMapService en el paquete com.skillmap.backend.service. Esta clase debe manejar la lógica de negocio del mapeo de habilidades.\n- Modificar la clase SkillController para agregar funcionalidad para manejar el mapeo de habilidades.\n- Modificar la clase SkillService para agregar funcionalidad para manejar el mapeo de habilidades.\n\n--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---\n- Modifica únicamente las clases marcadas como MODIFICABLE.\n- Crea nuevas clases solo si están indicadas como NUEVA.\n- No cambies de paquete ni nombre de clase.\n- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.\n- No omitas lógica existente.\n- Cada clase debe comenzar con `package ...`.\n- Devuelve únicamente clases y tests JUnit 5 válidos.\n- No incluyas explicaciones ni comentarios adicionales.\n- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.\n- No elimines implementaciones de interfaces ya declaradas.\n- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera\n- Si se crea una llamada a un método de la clase modificada asegúrate que ese método exista en la clase\n- Si se crea una llamada a un método de otra clase asegúrate que ese método exista en la clase o créalo de ser necesario\n- Asegurate que el el código generado sea compilable, corríjelo hasta que lo sea\n- Nunca uses el método stream() u otros métodos que pueden ser ambiguos entre versiones de Java.\n- Usa únicamente paquetes jakarta.persistence y jakarta.validation para anotaciones JPA y de validación.\n- Siempre importa las clases que uses dentro de otra clase, valida siempre que clase clase utilizada tenga su import correspondiente.\n- Cuando asignes el resultado de un método a una variable siempre los tipos de la variable y el método deben ser compatibles.  Por ejemplo, no trates de asignar un método que retorna Iterable a una variable de tipo List.\n"
    }
  ],
  "temperature": 0.3
}
