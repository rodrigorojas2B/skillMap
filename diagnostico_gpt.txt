**Diseño de API, flujo y entidades**

1. API REST esperada:
    - POST /categorias: Crea una nueva categoría. Parámetros de entrada: nombre de la categoría. Salida: ID de la categoría creada.
    - GET /categorias: Lista todas las categorías. Sin parámetros de entrada. Salida: lista de categorías.
    - PUT /categorias/{id}: Actualiza una categoría existente. Parámetros de entrada: ID de la categoría, nuevo nombre. Sin salida.
    - DELETE /categorias/{id}: Elimina una categoría existente. Parámetros de entrada: ID de la categoría. Sin salida.

2. Operaciones de negocio:
    - Crear una nueva categoría: Se debe verificar que el nombre no esté vacío y que no exista una categoría con el mismo nombre. Si la verificación es exitosa, se crea la categoría.
    - Listar todas las categorías: Se obtienen todas las categorías de la base de datos.
    - Actualizar una categoría: Se debe verificar que el nuevo nombre no esté vacío y que no exista una categoría con el mismo nombre. Si la verificación es exitosa, se actualiza la categoría.
    - Eliminar una categoría: Se debe verificar que la categoría no esté asignada a ninguna habilidad. Si la verificación es exitosa, se elimina la categoría.

3. Entidades necesarias:
    - Categoria: Representa una categoría de habilidades. Atributos principales: id, nombre.
    - Skill: Representa una habilidad. Atributos principales: id, nombre, categoria_id.

4. Flujo general:
    - El Controller recibe la petición y la pasa al Service.
    - El Service realiza las verificaciones necesarias y llama al Repository.
    - El Repository interactúa con la base de datos y devuelve los resultados al Service.
    - El Service devuelve los resultados al Controller, que los envía como respuesta.

**Análisis de clases existentes**

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| BackendApplication | com.skillmap.backend | REUTILIZABLE-AS-IS | Clase principal de la aplicación, no necesita modificaciones para esta historia de usuario. |
| Categoria | com.skillmap.backend.model | NUEVA | Se necesita una nueva clase para representar la entidad Categoria. |
| CategoriaController | com.skillmap.backend.controller | NUEVA | Se necesita una nueva clase para manejar las peticiones HTTP relacionadas con las categorías. |
| CategoriaService | com.skillmap.backend.service | NUEVA | Se necesita una nueva clase para manejar la lógica de negocio relacionada con las categorías. |
| CategoriaRepository | com.skillmap.backend.repository | NUEVA | Se necesita una nueva clase para interactuar con la base de datos y manejar las categorías. |
| Skill | com.skillmap.backend.model | NUEVA | Se necesita una nueva clase para representar la entidad Skill y verificar si una categoría está asignada a alguna habilidad. |
| SkillRepository | com.skillmap.backend.repository | NUEVA | Se necesita una nueva clase para interactuar con la base de datos y manejar las habilidades. |

