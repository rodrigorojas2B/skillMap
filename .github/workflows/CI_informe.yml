name: Build + Sonar + Informe

on:
  push:
    branches:
      - main

jobs:
  build-and-sonar:
    runs-on: ubuntu-latest

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      GH_PAT: ${{ secrets.GH_PAT }}
      SONAR_PROJECT_KEY: rodrigorojasg_testSpring
      SONAR_ORGANIZATION: rodrigorojasg

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Instalar Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Diagnóstico de fuentes presentes
        run: |
            echo "== Archivos .java =="
            find . -name "*.java"
            echo "== Archivos .class =="
            find . -name "*.class"
            
      - name: Build (captura de log)
        id: build
        run: |
          mvn clean verify 2>&1 | tee build.log || echo "BUILD_FAILED=1" >> $GITHUB_ENV

      - name: SonarCloud Scan
        run: |
          mkdir -p src/test/java  # crea carpeta vacía si no existe
          mvn sonar:sonar \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.organization=$SONAR_ORGANIZATION \
            -Dsonar.projectName="testSpring Original" \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN || echo "SONAR_FAILED=1" >> $GITHUB_ENV

      - name: Obtener errores Sonar
        if: success() || failure()
        run: |
          curl -s "https://sonarcloud.io/api/issues/search?componentKeys=$SONAR_PROJECT_KEY&severities=BLOCKER,CRITICAL,MAJOR" > sonar_issues.json
          jq -c '{issues: [.issues[] | {severity, rule, message, component, line}]}' sonar_issues.json > sonar_filtered.json

      - name: Guardar resultado como JSON y subir como artifact
        if: always()
        run: |
            mkdir -p salida
            SONAR_ERRORS=$(cat sonar_filtered.json)
            RUN_NUMBER=$GITHUB_RUN_NUMBER
            RUN_ID=$GITHUB_RUN_ID
            REPO=$GITHUB_REPOSITORY
            COMMIT=$GITHUB_SHA
            PAYLOAD_FILE="salida/salida${RUN_NUMBER}.json"
  
            if [[ "$BUILD_FAILED" == "1" ]]; then
              BUILD_RESULT="falló"
              BUILD_LOG=$(tail -n 100 build.log | jq -R -s .)
              echo "{
                    \"build_result\": \"$BUILD_RESULT\",
                    \"commit\": \"$COMMIT\",
                    \"workflow_url\": \"https://github.com/$REPO/actions/runs/$RUN_ID\",
                    \"build_log\": $BUILD_LOG,
                    \"sonar_errors\": $SONAR_ERRORS
                }" > $PAYLOAD_FILE
            else
              BUILD_RESULT="ok"
              echo "{
                    \"build_result\": \"$BUILD_RESULT\",
                    \"commit\": \"$COMMIT\",
                    \"workflow_url\": \"https://github.com/$REPO/actions/runs/$RUN_ID\",
                    \"sonar_errors\": $SONAR_ERRORS
                }" > $PAYLOAD_FILE
            fi

      - name: Subir resultado como artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: resultado-${{ github.run_number }}
          path: salida/salida${{ github.run_number }}.json
  
  