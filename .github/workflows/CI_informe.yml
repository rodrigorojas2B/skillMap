name: Build + Sonar + Informe

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'salida/**'
      - '.github/workflows/**'
      - 'historias-usuario/**'

      
jobs:
  build-and-sonar:
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      GH_PAT: ${{ secrets.GH_PAT }}
      SONAR_PROJECT_KEY: rodrigorojas2B_skillMap
      SONAR_ORGANIZATION: rodrigorojas2b

    steps:
      - name: Checkout código
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Instalar Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Diagnóstico de fuentes presentes
        run: |
            echo "== Archivos .java =="
            find . -name "*.java"
            echo "== Archivos .class =="
            find . -name "*.class"

      - name: Build (captura de log)
        id: build
        run: |
            set -o pipefail
            mvn clean verify 2>&1 | tee build.log
        continue-on-error: true

      - name: Evaluar estado de build
        if: always()
        run: |
            if grep -q "\[INFO\] BUILD FAILURE" build.log; then
            echo "BUILD_FAILED=1" >> $GITHUB_ENV
            else
            echo "BUILD_FAILED=0" >> $GITHUB_ENV
            fi

      - name: SonarCloud Scan
        run: |
          mkdir -p src/test/java  # crea carpeta vacía si no existe
          mvn sonar:sonar \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.organization=$SONAR_ORGANIZATION \
            -Dsonar.projectName="testSpring Original" \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.scanner.force-deletion=true \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN || echo "SONAR_FAILED=1" >> $GITHUB_ENV

      - name: Obtener errores Sonar
        if: success() || failure()
        run: |
          curl -s "https://sonarcloud.io/api/issues/search?componentKeys=$SONAR_PROJECT_KEY&severities=BLOCKER,CRITICAL,MAJOR" > sonar_issues.json
          jq -c '{issues: [.issues[] | {severity, rule, message, component, line}]}' sonar_issues.json > sonar_filtered.json

      - name: Guardar resultado como JSON
        if: always()
        run: |
            mkdir -p salida
            SONAR_ERRORS=$(cat sonar_filtered.json)
            RUN_NUMBER=$GITHUB_RUN_NUMBER
            RUN_ID=$GITHUB_RUN_ID
            REPO=$GITHUB_REPOSITORY
            COMMIT=$GITHUB_SHA
            PAYLOAD_FILE="salida/resultado.json"
  
            if [[ "$BUILD_FAILED" == "1" ]]; then
              BUILD_RESULT="falló"
              BUILD_LOG=$(tail -n 100 build.log | jq -R -s .)
              echo "{
                    \"run_number\": $RUN_NUMBER,
                    \"build_result\": \"$BUILD_RESULT\",
                    \"commit\": \"$COMMIT\",
                    \"workflow_url\": \"https://github.com/$REPO/actions/runs/$RUN_ID\",
                    \"build_log\": $BUILD_LOG,
                    \"sonar_errors\": $SONAR_ERRORS
                }" > $PAYLOAD_FILE
            else
              BUILD_RESULT="ok"
              echo "{
                    \"run_number\": $RUN_NUMBER,
                    \"build_result\": \"$BUILD_RESULT\",
                    \"commit\": \"$COMMIT\",
                    \"workflow_url\": \"https://github.com/$REPO/actions/runs/$RUN_ID\",
                    \"sonar_errors\": $SONAR_ERRORS
                }" > $PAYLOAD_FILE
            fi
        
      - name: Subir JSON al repo
        run: |
              git config --global user.email "bot@example.com"
              git config --global user.name "CI Bot"
              git add salida/resultado.json
              git commit -m "ci: resultado de análisis" || echo "Sin cambios para commitear"
              git push